{
  "name": "LLEN",
  "summary": "Returns the length of a list.",
  "complexity": "O(1)",
  "group": "list",
  "since": "1.0.0",
  "arity": 2,
  "function": "llenCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "List length.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "UNLOAD",
  "summary": "Unloads a module.",
  "complexity": "O(1)",
  "group": "server",
  "since": "4.0.0",
  "arity": 3,
  "container": "MODULE",
  "function": "moduleCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "NOSCRIPT",
    "PROTECTED"
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "name",
      "type": "string"
    }
  ]
}
{
  "name": "READONLY",
  "summary": "Enables read-only queries for a connection to a Redis Cluster replica node.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 1,
  "function": "readonlyCommand",
  "command_flags": [
    "FAST",
    "LOADING",
    "STALE"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "BRPOPLPUSH",
  "summary": "Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.",
  "complexity": "O(1)",
  "group": "list",
  "since": "2.2.0",
  "arity": 4,
  "function": "brpoplpushCommand",
  "history": [
    [
      "6.0.0",
      "`timeout` is interpreted as a double instead of an integer."
    ]
  ],
  "deprecated_since": "6.2.0",
  "replaced_by": "`BLMOVE` with the `RIGHT` and `LEFT` arguments",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "BLOCKING"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RW",
        "INSERT"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "string",
        "description": "The element being popped from source and pushed to destination."
      },
      {
        "type": "null",
        "description": "Timeout is reached."
      }
    ]
  },
  "arguments": [
    {
      "name": "source",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 1
    },
    {
      "name": "timeout",
      "type": "double"
    }
  ]
}
{
  "name": "WAIT",
  "summary": "Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "3.0.0",
  "arity": 3,
  "function": "waitCommand",
  "command_flags": [],
  "acl_categories": [
    "CONNECTION"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:AGG_MIN"
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The number of replicas reached by all the writes performed in the context of the current connection.",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "numreplicas",
      "type": "integer"
    },
    {
      "name": "timeout",
      "type": "integer"
    }
  ]
}
{
  "name": "MSETNX",
  "summary": "Atomically modifies the string values of one or more keys only when all keys don't exist.",
  "complexity": "O(N) where N is the number of keys to set.",
  "group": "string",
  "since": "1.0.1",
  "arity": -3,
  "function": "msetnxCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "INSERT"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 2,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "No key was set (at least one key already existed).",
        "const": 0
      },
      {
        "description": "All the keys were set.",
        "const": 1
      }
    ]
  },
  "arguments": [
    {
      "name": "data",
      "type": "block",
      "multiple": true,
      "arguments": [
        {
          "name": "key",
          "type": "key",
          "key_spec_index": 0
        },
        {
          "name": "value",
          "type": "string"
        }
      ]
    }
  ]
}
{
  "name": "SDIFFSTORE",
  "summary": "Stores the difference of multiple sets in a key.",
  "complexity": "O(N) where N is the total number of elements in all given sets.",
  "group": "set",
  "since": "1.0.0",
  "arity": -3,
  "function": "sdiffstoreCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "Number of the elements in the resulting set.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    }
  ]
}
{
  "name": "GEORADIUS",
  "summary": "Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.",
  "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
  "group": "geo",
  "since": "3.2.0",
  "arity": -6,
  "function": "georadiusCommand",
  "get_keys_function": "georadiusGetKeys",
  "history": [
    [
      "6.2.0",
      "Added the `ANY` option for `COUNT`."
    ],
    [
      "7.0.0",
      "Added support for uppercase unit names."
    ]
  ],
  "deprecated_since": "6.2.0",
  "replaced_by": "`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "keyword": {
          "keyword": "STORE",
          "startfrom": 6
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "keyword": {
          "keyword": "STOREDIST",
          "startfrom": 6
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "longitude",
      "type": "double"
    },
    {
      "name": "latitude",
      "type": "double"
    },
    {
      "name": "radius",
      "type": "double"
    },
    {
      "name": "unit",
      "type": "oneof",
      "arguments": [
        {
          "name": "m",
          "type": "pure-token",
          "token": "m"
        },
        {
          "name": "km",
          "type": "pure-token",
          "token": "km"
        },
        {
          "name": "ft",
          "type": "pure-token",
          "token": "ft"
        },
        {
          "name": "mi",
          "type": "pure-token",
          "token": "mi"
        }
      ]
    },
    {
      "name": "withcoord",
      "token": "WITHCOORD",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "withdist",
      "token": "WITHDIST",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "withhash",
      "token": "WITHHASH",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "count-block",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "token": "COUNT",
          "name": "count",
          "type": "integer"
        },
        {
          "name": "any",
          "token": "ANY",
          "type": "pure-token",
          "optional": true,
          "since": "6.2.0"
        }
      ]
    },
    {
      "name": "order",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "asc",
          "type": "pure-token",
          "token": "ASC"
        },
        {
          "name": "desc",
          "type": "pure-token",
          "token": "DESC"
        }
      ]
    },
    {
      "name": "store",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "token": "STORE",
          "name": "storekey",
          "display": "key",
          "type": "key",
          "key_spec_index": 1
        },
        {
          "token": "STOREDIST",
          "name": "storedistkey",
          "display": "key",
          "type": "key",
          "key_spec_index": 2
        }
      ]
    }
  ],
  "reply_schema": {
    "description": "Array of matched members information",
    "anyOf": [
      {
        "description": "If no WITH* option is specified, array of matched members names",
        "type": "array",
        "items": {
          "description": "name",
          "type": "string"
        }
      },
      {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 1,
          "maxItems": 4,
          "items": [
            {
              "description": "Matched member name",
              "type": "string"
            }
          ],
          "additionalItems": {
            "oneOf": [
              {
                "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius",
                "type": "string"
              },
              {
                "description": "If WITHHASH option is specified, the geohash integer",
                "type": "integer"
              },
              {
                "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)",
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "latitude (x)",
                    "type": "number"
                  },
                  {
                    "description": "longitude (y)",
                    "type": "number"
                  }
                ]
              }
            ]
          }
        }
      },
      {
        "description": "number of items stored in key",
        "type": "integer"
      }
    ]
  }
}
{
  "name": "PSYNC",
  "summary": "An internal command used in replication.",
  "group": "server",
  "since": "2.8.0",
  "arity": -3,
  "function": "syncCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "NO_MULTI",
    "NOSCRIPT"
  ],
  "arguments": [
    {
      "name": "replicationid",
      "type": "string"
    },
    {
      "name": "offset",
      "type": "integer"
    }
  ]
}
{
  "name": "BZPOPMIN",
  "summary": "Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.",
  "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
  "group": "sorted_set",
  "since": "5.0.0",
  "arity": -3,
  "function": "bzpopminCommand",
  "history": [
    [
      "6.0.0",
      "`timeout` is interpreted as a double instead of an integer."
    ]
  ],
  "command_flags": [
    "WRITE",
    "FAST",
    "BLOCKING"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -2,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "Timeout reached and no elements were popped.",
        "type": "null"
      },
      {
        "description": "The keyname, popped member, and its score.",
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "items": [
          {
            "description": "Keyname",
            "type": "string"
          },
          {
            "description": "Member",
            "type": "string"
          },
          {
            "description": "Score",
            "type": "number"
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    },
    {
      "name": "timeout",
      "type": "double"
    }
  ]
}
{
  "name": "MASTER",
  "summary": "Returns the state of a master Redis instance.",
  "complexity": "O(1)",
  "group": "sentinel",
  "since": "2.8.4",
  "arity": 3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "type": "object",
    "description": "The state and info of the specified master.",
    "additionalProperties": {
      "type": "string"
    }
  },
  "arguments": [
    {
      "name": "master-name",
      "type": "string"
    }
  ]
}
{
  "name": "MYID",
  "summary": "Returns the ID of a node.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 2,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "STALE"
  ],
  "reply_schema": {
    "description": "the node id",
    "type": "string"
  }
}
{
  "name": "ZPOPMAX",
  "summary": "Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
  "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
  "group": "sorted_set",
  "since": "5.0.0",
  "arity": -2,
  "function": "zpopmaxCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "type": "array",
        "description": "List of popped elements and scores when 'COUNT' isn't specified.",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "type": "string",
            "description": "Popped element."
          },
          {
            "type": "number",
            "description": "Score."
          }
        ]
      },
      {
        "type": "array",
        "description": "List of popped elements and scores when 'COUNT' is specified.",
        "items": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "Popped element."
            },
            {
              "type": "number",
              "description": "Score."
            }
          ]
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "LMPOP",
  "summary": "Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.",
  "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
  "group": "list",
  "since": "7.0.0",
  "arity": -4,
  "function": "lmpopCommand",
  "get_keys_function": "lmpopGetKeys",
  "command_flags": [
    "WRITE"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "description": "If no element could be popped.",
        "type": "null"
      },
      {
        "description": "List key from which elements were popped.",
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Name of the key from which elements were popped.",
            "type": "string"
          },
          {
            "description": "Array of popped elements.",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    },
    {
      "name": "where",
      "type": "oneof",
      "arguments": [
        {
          "name": "left",
          "type": "pure-token",
          "token": "LEFT"
        },
        {
          "name": "right",
          "type": "pure-token",
          "token": "RIGHT"
        }
      ]
    },
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "DUMP",
  "summary": "Returns a serialized representation of the value stored at a key.",
  "complexity": "O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).",
  "group": "generic",
  "since": "2.6.0",
  "arity": 2,
  "function": "dumpCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The serialized value.",
        "type": "string"
      },
      {
        "description": "Key does not exist.",
        "type": "null"
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "WHOAMI",
  "summary": "Returns the authenticated username of the current connection.",
  "complexity": "O(1)",
  "group": "server",
  "since": "6.0.0",
  "arity": 2,
  "container": "ACL",
  "function": "aclCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "reply_schema": {
    "type": "string",
    "description": "The username of the current connection."
  }
}
{
  "name": "FLUSH",
  "summary": "Deletes all libraries and functions.",
  "complexity": "O(N) where N is the number of functions deleted",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -2,
  "container": "FUNCTION",
  "function": "functionFlushCommand",
  "command_flags": [
    "NOSCRIPT",
    "WRITE"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "arguments": [
    {
      "name": "flush-type",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "async",
          "type": "pure-token",
          "token": "ASYNC"
        },
        {
          "name": "sync",
          "type": "pure-token",
          "token": "SYNC"
        }
      ]
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "LIST",
  "summary": "Returns information about all libraries.",
  "complexity": "O(N) where N is the number of functions",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -2,
  "container": "FUNCTION",
  "function": "functionListCommand",
  "command_flags": [
    "NOSCRIPT"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT_ORDER"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "reply_schema": {
    "type": "array",
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "library_name": {
          "description": " the name of the library",
          "type": "string"
        },
        "engine": {
          "description": "the engine of the library",
          "type": "string"
        },
        "functions": {
          "description": "the list of functions in the library",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "description": "the name of the function",
                "type": "string"
              },
              "description": {
                "description": "the function's description",
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "flags": {
                "description": "an array of function flags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "library_code": {
          "description": "the library's source code (when given the WITHCODE modifier)",
          "type": "string"
        }
      }
    }
  },
  "arguments": [
    {
      "name": "library-name-pattern",
      "type": "string",
      "token": "LIBRARYNAME",
      "optional": true
    },
    {
      "name": "withcode",
      "type": "pure-token",
      "token": "WITHCODE",
      "optional": true
    }
  ]
}
{
  "name": "HELP",
  "summary": "Returns helpful text about the different subcommands.",
  "complexity": "O(1)",
  "group": "stream",
  "since": "5.0.0",
  "arity": 2,
  "container": "XGROUP",
  "function": "xgroupCommand",
  "command_flags": [
    "LOADING",
    "STALE"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "reply_schema": {
    "type": "array",
    "description": "Helpful text about subcommands.",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "PTTL",
  "summary": "Returns the expiration time in milliseconds of a key.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "2.6.0",
  "arity": 2,
  "function": "pttlCommand",
  "history": [
    [
      "2.8.0",
      "Added the -2 reply."
    ]
  ],
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "TTL in milliseconds.",
        "type": "integer",
        "minimum": 0
      },
      {
        "description": "The key exists but has no associated expire.",
        "const": -1
      },
      {
        "description": "The key does not exist.",
        "const": -2
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "DISCARD",
  "summary": "Discards a transaction.",
  "complexity": "O(N), when N is the number of queued commands",
  "group": "transactions",
  "since": "2.0.0",
  "arity": 1,
  "function": "discardCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "FAST",
    "ALLOW_BUSY"
  ],
  "acl_categories": [
    "TRANSACTION"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "GEOHASH",
  "summary": "Returns members from a geospatial index as geohash strings.",
  "complexity": "O(1) for each member requested.",
  "group": "geo",
  "since": "3.2.0",
  "arity": -2,
  "function": "geohashCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "member",
      "type": "string",
      "multiple": true,
      "optional": true
    }
  ],
  "reply_schema": {
    "description": "An array where each element is the Geohash corresponding to each member name passed as argument to the command.",
    "type": "array",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "GETEX",
  "summary": "Returns the string value of a key after setting its expiration time.",
  "complexity": "O(1)",
  "group": "string",
  "since": "6.2.0",
  "arity": -2,
  "function": "getexCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "notes": "RW and UPDATE because it changes the TTL",
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The value of the key.",
        "type": "string"
      },
      {
        "description": "Key does not exist.",
        "type": "null"
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "expiration",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "seconds",
          "type": "integer",
          "token": "EX"
        },
        {
          "name": "milliseconds",
          "type": "integer",
          "token": "PX"
        },
        {
          "name": "unix-time-seconds",
          "type": "unix-time",
          "token": "EXAT"
        },
        {
          "name": "unix-time-milliseconds",
          "type": "unix-time",
          "token": "PXAT"
        },
        {
          "name": "persist",
          "type": "pure-token",
          "token": "PERSIST"
        }
      ]
    }
  ]
}
{
  "name": "HEXISTS",
  "summary": "Determines whether a field exists in a hash.",
  "complexity": "O(1)",
  "group": "hash",
  "since": "2.0.0",
  "arity": 3,
  "function": "hexistsCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "HASH"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The hash does not contain the field, or key does not exist.",
        "const": 0
      },
      {
        "description": "The hash contains the field.",
        "const": 1
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "field",
      "type": "string"
    }
  ]
}
{
  "name": "ADDSLOTS",
  "summary": "Assigns new hash slots to a node.",
  "complexity": "O(N) where N is the total number of hash slot arguments",
  "group": "cluster",
  "since": "3.0.0",
  "arity": -3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "STALE"
  ],
  "arguments": [
    {
      "name": "slot",
      "type": "integer",
      "multiple": true
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "XCLAIM",
  "summary": "Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.",
  "complexity": "O(log N) with N being the number of messages in the PEL of the consumer group.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -6,
  "function": "xclaimCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "group",
      "type": "string"
    },
    {
      "name": "consumer",
      "type": "string"
    },
    {
      "name": "min-idle-time",
      "type": "string"
    },
    {
      "name": "ID",
      "type": "string",
      "multiple": true
    },
    {
      "token": "IDLE",
      "name": "ms",
      "type": "integer",
      "optional": true
    },
    {
      "token": "TIME",
      "name": "unix-time-milliseconds",
      "type": "unix-time",
      "optional": true
    },
    {
      "token": "RETRYCOUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    },
    {
      "name": "force",
      "token": "FORCE",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "justid",
      "token": "JUSTID",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "lastid",
      "token": "LASTID",
      "type": "string",
      "optional": true
    }
  ],
  "reply_schema": {
    "description": "Stream entries with IDs matching the specified range.",
    "anyOf": [
      {
        "description": "If JUSTID option is specified, return just an array of IDs of messages successfully claimed",
        "type": "array",
        "items": {
          "description": "Entry ID",
          "type": "string",
          "pattern": "[0-9]+-[0-9]+"
        }
      },
      {
        "description": "array of stream entries that contains each entry as an array of 2 elements, the Entry ID and the entry data itself",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "Entry ID",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            {
              "description": "Data",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      }
    ]
  }
}
{
  "name": "SIMULATE-FAILURE",
  "summary": "Simulates failover scenarios.",
  "group": "sentinel",
  "since": "3.2.0",
  "arity": -3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The simulated flag was set.",
        "const": "OK"
      },
      {
        "description": "Supported simulates flags. Returned in case `HELP` was used.",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "mode",
      "type": "oneof",
      "optional": true,
      "multiple": true,
      "arguments": [
        {
          "name": "crash-after-election",
          "type": "pure-token"
        },
        {
          "name": "crash-after-promotion",
          "type": "pure-token"
        },
        {
          "name": "help",
          "type": "pure-token"
        }
      ]
    }
  ]
}
{
  "name": "GROUPS",
  "summary": "Returns a list of the consumer groups of a stream.",
  "complexity": "O(1)",
  "group": "stream",
  "since": "5.0.0",
  "arity": 3,
  "container": "XINFO",
  "history": [
    [
      "7.0.0",
      "Added the `entries-read` and `lag` fields"
    ]
  ],
  "function": "xinfoCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "array",
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "consumers": {
          "type": "integer"
        },
        "pending": {
          "type": "integer"
        },
        "last-delivered-id": {
          "type": "string",
          "pattern": "[0-9]+-[0-9]+"
        },
        "entries-read": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "integer"
            }
          ]
        },
        "lag": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "type": "integer"
            }
          ]
        }
      }
    }
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "GET",
  "summary": "Returns the string value of a key.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": 2,
  "function": "getCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The value of the key.",
        "type": "string"
      },
      {
        "description": "Key does not exist.",
        "type": "null"
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "SSCAN",
  "summary": "Iterates over members of a set.",
  "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
  "group": "set",
  "since": "2.8.0",
  "arity": -3,
  "function": "sscanCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "SET"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "cursor",
      "type": "integer"
    },
    {
      "token": "MATCH",
      "name": "pattern",
      "type": "pattern",
      "optional": true
    },
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ],
  "reply_schema": {
    "description": "cursor and scan response in array form",
    "type": "array",
    "minItems": 2,
    "maxItems": 2,
    "items": [
      {
        "description": "cursor",
        "type": "string"
      },
      {
        "description": "list of set members",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    ]
  }
}
{
  "name": "TOUCH",
  "summary": "Returns the number of existing keys out of those specified after updating the time they were last accessed.",
  "complexity": "O(N) where N is the number of keys that will be touched.",
  "group": "generic",
  "since": "3.2.1",
  "arity": -2,
  "function": "touchCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "REQUEST_POLICY:MULTI_SHARD",
    "RESPONSE_POLICY:AGG_SUM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "the number of touched keys",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "INCRBYFLOAT",
  "summary": "Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "2.6.0",
  "arity": 3,
  "function": "incrbyfloatCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "string",
    "description": "The value of the key after incrementing it."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "increment",
      "type": "double"
    }
  ]
}
{
  "name": "MSET",
  "summary": "Atomically creates or modifies the string values of one or more keys.",
  "complexity": "O(N) where N is the number of keys to set.",
  "group": "string",
  "since": "1.0.1",
  "arity": -3,
  "function": "msetCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "STRING"
  ],
  "command_tips": [
    "REQUEST_POLICY:MULTI_SHARD",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 2,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "data",
      "type": "block",
      "multiple": true,
      "arguments": [
        {
          "name": "key",
          "type": "key",
          "key_spec_index": 0
        },
        {
          "name": "value",
          "type": "string"
        }
      ]
    }
  ]
}
{
  "name": "FUNCTION",
  "summary": "A container for function commands.",
  "complexity": "Depends on subcommand.",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -2
}
{
  "name": "KEYSLOT",
  "summary": "Returns the hash slot for a key.",
  "complexity": "O(N) where N is the number of bytes in the key",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "STALE"
  ],
  "arguments": [
    {
      "name": "key",
      "type": "string"
    }
  ],
  "reply_schema": {
    "description": "The hash slot number for the specified key",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "XREADGROUP",
  "summary": "Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.",
  "complexity": "For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -7,
  "function": "xreadCommand",
  "get_keys_function": "xreadGetKeys",
  "command_flags": [
    "BLOCKING",
    "WRITE"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "keyword": {
          "keyword": "STREAMS",
          "startfrom": 4
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 2
        }
      }
    }
  ],
  "arguments": [
    {
      "token": "GROUP",
      "name": "group-block",
      "type": "block",
      "arguments": [
        {
          "name": "group",
          "type": "string"
        },
        {
          "name": "consumer",
          "type": "string"
        }
      ]
    },
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    },
    {
      "token": "BLOCK",
      "name": "milliseconds",
      "type": "integer",
      "optional": true
    },
    {
      "name": "noack",
      "token": "NOACK",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "streams",
      "token": "STREAMS",
      "type": "block",
      "arguments": [
        {
          "name": "key",
          "type": "key",
          "key_spec_index": 0,
          "multiple": true
        },
        {
          "name": "ID",
          "type": "string",
          "multiple": true
        }
      ]
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "If BLOCK option is specified and the timeout expired",
        "type": "null"
      },
      {
        "description": "A map of key-value elements when each element composed of key name and the entries reported for that key",
        "type": "object",
        "additionalProperties": {
          "description": "The entries reported for that key",
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Stream id",
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              },
              {
                "oneOf": [
                  {
                    "description": "Array of field-value pairs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  }
}
{
  "name": "ZREMRANGEBYSCORE",
  "summary": "Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.",
  "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
  "group": "sorted_set",
  "since": "1.2.0",
  "arity": 4,
  "function": "zremrangebyscoreCommand",
  "command_flags": [
    "WRITE"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "Number of elements removed."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "min",
      "type": "double"
    },
    {
      "name": "max",
      "type": "double"
    }
  ]
}
{
  "name": "CONSUMERS",
  "summary": "Returns a list of the consumers in a consumer group.",
  "complexity": "O(1)",
  "group": "stream",
  "since": "5.0.0",
  "arity": 4,
  "container": "XINFO",
  "function": "xinfoCommand",
  "history": [
    [
      "7.2.0",
      "Added the `inactive` field."
    ]
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "group",
      "type": "string"
    }
  ],
  "reply_schema": {
    "description": "Array list of consumers",
    "type": "array",
    "uniqueItems": true,
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "pending": {
          "type": "integer"
        },
        "idle": {
          "type": "integer"
        },
        "inactive": {
          "type": "integer"
        }
      }
    }
  }
}
{
  "name": "BITCOUNT",
  "summary": "Counts the number of set bits (population counting) in a string.",
  "complexity": "O(N)",
  "group": "bitmap",
  "since": "2.6.0",
  "arity": -2,
  "function": "bitcountCommand",
  "history": [
    [
      "7.0.0",
      "Added the `BYTE|BIT` option."
    ]
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "BITMAP"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "range",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "name": "start",
          "type": "integer"
        },
        {
          "name": "end",
          "type": "integer"
        },
        {
          "name": "unit",
          "type": "oneof",
          "optional": true,
          "since": "7.0.0",
          "arguments": [
            {
              "name": "byte",
              "type": "pure-token",
              "token": "BYTE"
            },
            {
              "name": "bit",
              "type": "pure-token",
              "token": "BIT"
            }
          ]
        }
      ]
    }
  ],
  "reply_schema": {
    "description": "The number of bits set to 1.",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "MGET",
  "summary": "Atomically returns the string values of one or more keys.",
  "complexity": "O(N) where N is the number of keys to retrieve.",
  "group": "string",
  "since": "1.0.0",
  "arity": -2,
  "function": "mgetCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "command_tips": [
    "REQUEST_POLICY:MULTI_SHARD"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "List of values at the specified keys.",
    "type": "array",
    "minItems": 1,
    "items": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    }
  ]
}
{
  "name": "SET",
  "summary": "Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": -3,
  "function": "setCommand",
  "get_keys_function": "setGetKeys",
  "history": [
    [
      "2.6.12",
      "Added the `EX`, `PX`, `NX` and `XX` options."
    ],
    [
      "6.0.0",
      "Added the `KEEPTTL` option."
    ],
    [
      "6.2.0",
      "Added the `GET`, `EXAT` and `PXAT` option."
    ],
    [
      "7.0.0",
      "Allowed the `NX` and `GET` options to be used together."
    ]
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "notes": "RW and ACCESS due to the optional `GET` argument",
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE",
        "VARIABLE_FLAGS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "description": "`GET` not given: Operation was aborted (conflict with one of the `XX`/`NX` options).",
        "type": "null"
      },
      {
        "description": "`GET` not given: The key was set.",
        "const": "OK"
      },
      {
        "description": "`GET` given: The key didn't exist before the `SET`",
        "type": "null"
      },
      {
        "description": "`GET` given: The previous value of the key",
        "type": "string"
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "value",
      "type": "string"
    },
    {
      "name": "condition",
      "type": "oneof",
      "optional": true,
      "since": "2.6.12",
      "arguments": [
        {
          "name": "nx",
          "type": "pure-token",
          "token": "NX"
        },
        {
          "name": "xx",
          "type": "pure-token",
          "token": "XX"
        }
      ]
    },
    {
      "name": "get",
      "token": "GET",
      "type": "pure-token",
      "optional": true,
      "since": "6.2.0"
    },
    {
      "name": "expiration",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "seconds",
          "type": "integer",
          "token": "EX",
          "since": "2.6.12"
        },
        {
          "name": "milliseconds",
          "type": "integer",
          "token": "PX",
          "since": "2.6.12"
        },
        {
          "name": "unix-time-seconds",
          "type": "unix-time",
          "token": "EXAT",
          "since": "6.2.0"
        },
        {
          "name": "unix-time-milliseconds",
          "type": "unix-time",
          "token": "PXAT",
          "since": "6.2.0"
        },
        {
          "name": "keepttl",
          "type": "pure-token",
          "token": "KEEPTTL",
          "since": "6.0.0"
        }
      ]
    }
  ]
}
{
  "name": "SUBSTR",
  "summary": "Returns a substring from a string value.",
  "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
  "group": "string",
  "since": "1.0.0",
  "arity": 4,
  "function": "getrangeCommand",
  "deprecated_since": "2.0.0",
  "replaced_by": "`GETRANGE`",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "string",
    "description": "The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "start",
      "type": "integer"
    },
    {
      "name": "end",
      "type": "integer"
    }
  ]
}
{
  "name": "DECRBY",
  "summary": "Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": 3,
  "function": "decrbyCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The value of the key after decrementing it."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "decrement",
      "type": "integer"
    }
  ]
}
{
  "name": "FAILOVER",
  "summary": "Forces a Redis Sentinel failover.",
  "group": "sentinel",
  "since": "2.8.4",
  "arity": 3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "const": "OK",
    "description": "Force a fail over as if the master was not reachable, and without asking for agreement to other Sentinels."
  },
  "arguments": [
    {
      "name": "master-name",
      "type": "string"
    }
  ]
}
{
  "name": "GETUSER",
  "summary": "Lists the ACL rules of a user.",
  "complexity": "O(N). Where N is the number of password, command and pattern rules that the user has.",
  "group": "server",
  "since": "6.0.0",
  "arity": 3,
  "container": "ACL",
  "function": "aclCommand",
  "history": [
    [
      "6.2.0",
      "Added Pub/Sub channel patterns."
    ],
    [
      "7.0.0",
      "Added selectors and changed the format of key and channel patterns from a list to their rule representation."
    ]
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "arguments": [
    {
      "name": "username",
      "type": "string"
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "a set of ACL rule definitions for the user",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "passwords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commands": {
            "description": "root selector's commands",
            "type": "string"
          },
          "keys": {
            "description": "root selector's keys",
            "type": "string"
          },
          "channels": {
            "description": "root selector's channels",
            "type": "string"
          },
          "selectors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "commands": {
                  "type": "string"
                },
                "keys": {
                  "type": "string"
                },
                "channels": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      {
        "description": "If user does not exist",
        "type": "null"
      }
    ]
  }
}
{
  "name": "ZRANGESTORE",
  "summary": "Stores a range of members from sorted set in a key.",
  "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.",
  "group": "sorted_set",
  "since": "6.2.0",
  "arity": -5,
  "function": "zrangestoreCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "Number of elements in the resulting sorted set."
  },
  "arguments": [
    {
      "name": "dst",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "src",
      "type": "key",
      "key_spec_index": 1
    },
    {
      "name": "min",
      "type": "string"
    },
    {
      "name": "max",
      "type": "string"
    },
    {
      "name": "sortby",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "byscore",
          "type": "pure-token",
          "token": "BYSCORE"
        },
        {
          "name": "bylex",
          "type": "pure-token",
          "token": "BYLEX"
        }
      ]
    },
    {
      "name": "rev",
      "token": "REV",
      "type": "pure-token",
      "optional": true
    },
    {
      "token": "LIMIT",
      "name": "limit",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "name": "offset",
          "type": "integer"
        },
        {
          "name": "count",
          "type": "integer"
        }
      ]
    }
  ]
}
{
  "name": "INCRBY",
  "summary": "Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": 3,
  "function": "incrbyCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The value of the key after incrementing it."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "increment",
      "type": "integer"
    }
  ]
}
{
  "name": "HVALS",
  "summary": "Returns all values in a hash.",
  "complexity": "O(N) where N is the size of the hash.",
  "group": "hash",
  "since": "2.0.0",
  "arity": 2,
  "function": "hvalsCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "HASH"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT_ORDER"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "array",
    "description": "List of values in the hash, or an empty list when the key does not exist.",
    "items": {
      "type": "string"
    }
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "FORGET",
  "summary": "Removes a node from the nodes table.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "STALE"
  ],
  "arguments": [
    {
      "name": "node-id",
      "type": "string"
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "DELCONSUMER",
  "summary": "Deletes a consumer from a consumer group.",
  "complexity": "O(1)",
  "group": "stream",
  "since": "5.0.0",
  "arity": 5,
  "container": "XGROUP",
  "function": "xgroupCommand",
  "command_flags": [
    "WRITE"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "group",
      "type": "string"
    },
    {
      "name": "consumer",
      "type": "string"
    }
  ],
  "reply_schema": {
    "description": "The number of pending messages that were yet associated with such a consumer",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "RESTORE",
  "summary": "Creates a key from the serialized representation of a value.",
  "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
  "group": "generic",
  "since": "2.6.0",
  "arity": -4,
  "function": "restoreCommand",
  "history": [
    [
      "3.0.0",
      "Added the `REPLACE` modifier."
    ],
    [
      "5.0.0",
      "Added the `ABSTTL` modifier."
    ],
    [
      "5.0.0",
      "Added the `IDLETIME` and `FREQ` options."
    ]
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "KEYSPACE",
    "DANGEROUS"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "ttl",
      "type": "integer"
    },
    {
      "name": "serialized-value",
      "type": "string"
    },
    {
      "name": "replace",
      "token": "REPLACE",
      "type": "pure-token",
      "optional": true,
      "since": "3.0.0"
    },
    {
      "name": "absttl",
      "token": "ABSTTL",
      "type": "pure-token",
      "optional": true,
      "since": "5.0.0"
    },
    {
      "token": "IDLETIME",
      "name": "seconds",
      "type": "integer",
      "optional": true,
      "since": "5.0.0"
    },
    {
      "token": "FREQ",
      "name": "frequency",
      "type": "integer",
      "optional": true,
      "since": "5.0.0"
    }
  ]
}
{
  "name": "ZINTERSTORE",
  "summary": "Stores the intersect of multiple sorted sets in a key.",
  "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
  "group": "sorted_set",
  "since": "2.0.0",
  "arity": -4,
  "function": "zinterstoreCommand",
  "get_keys_function": "zunionInterDiffStoreGetKeys",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "reply_schema": {
    "description": "Number of elements in the resulting sorted set.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    },
    {
      "token": "WEIGHTS",
      "name": "weight",
      "type": "integer",
      "optional": true,
      "multiple": true
    },
    {
      "token": "AGGREGATE",
      "name": "aggregate",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "sum",
          "type": "pure-token",
          "token": "SUM"
        },
        {
          "name": "min",
          "type": "pure-token",
          "token": "MIN"
        },
        {
          "name": "max",
          "type": "pure-token",
          "token": "MAX"
        }
      ]
    }
  ]
}
{
  "name": "STATS",
  "summary": "Returns details about memory usage.",
  "complexity": "O(1)",
  "group": "server",
  "since": "4.0.0",
  "arity": 2,
  "container": "MEMORY",
  "function": "memoryCommand",
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "reply_schema": {
    "description": "memory usage details",
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "peak.allocated": {
        "type": "integer"
      },
      "total.allocated": {
        "type": "integer"
      },
      "startup.allocated": {
        "type": "integer"
      },
      "replication.backlog": {
        "type": "integer"
      },
      "clients.slaves": {
        "type": "integer"
      },
      "clients.normal": {
        "type": "integer"
      },
      "cluster.links": {
        "type": "integer"
      },
      "aof.buffer": {
        "type": "integer"
      },
      "lua.caches": {
        "type": "integer"
      },
      "functions.caches": {
        "type": "integer"
      },
      "overhead.total": {
        "type": "integer"
      },
      "keys.count": {
        "type": "integer"
      },
      "keys.bytes-per-key": {
        "type": "integer"
      },
      "dataset.bytes": {
        "type": "integer"
      },
      "dataset.percentage": {
        "type": "number"
      },
      "peak.percentage": {
        "type": "number"
      },
      "allocator.allocated": {
        "type": "integer"
      },
      "allocator.active": {
        "type": "integer"
      },
      "allocator.resident": {
        "type": "integer"
      },
      "allocator-fragmentation.ratio": {
        "type": "number"
      },
      "allocator-fragmentation.bytes": {
        "type": "integer"
      },
      "allocator-rss.ratio": {
        "type": "number"
      },
      "allocator-rss.bytes": {
        "type": "integer"
      },
      "rss-overhead.ratio": {
        "type": "number"
      },
      "rss-overhead.bytes": {
        "type": "integer"
      },
      "fragmentation": {
        "type": "number"
      },
      "fragmentation.bytes": {
        "type": "integer"
      }
    },
    "patternProperties": {
      "^db.": {
        "type": "object",
        "properties": {
          "overhead.hashtable.main": {
            "type": "integer"
          },
          "overhead.hashtable.expires": {
            "type": "integer"
          },
          "overhead.hashtable.slot-to-keys": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      }
    }
  }
}
{
  "name": "LSET",
  "summary": "Sets the value of an element in a list by its index.",
  "complexity": "O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).",
  "group": "list",
  "since": "1.0.0",
  "arity": 4,
  "function": "lsetCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "index",
      "type": "integer"
    },
    {
      "name": "element",
      "type": "string"
    }
  ]
}
{
  "name": "HELP",
  "summary": "Returns helpful text about the different subcommands.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.13",
  "arity": 2,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "LOADING",
    "STALE"
  ],
  "reply_schema": {
    "type": "array",
    "description": "Helpful text about subcommands.",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "UNLINK",
  "summary": "Asynchronously deletes one or more keys.",
  "complexity": "O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.",
  "group": "generic",
  "since": "4.0.0",
  "arity": -2,
  "function": "unlinkCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "REQUEST_POLICY:MULTI_SHARD",
    "RESPONSE_POLICY:AGG_SUM"
  ],
  "key_specs": [
    {
      "flags": [
        "RM",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "the number of keys that were unlinked",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "TTL",
  "summary": "Returns the expiration time in seconds of a key.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "1.0.0",
  "arity": 2,
  "function": "ttlCommand",
  "history": [
    [
      "2.8.0",
      "Added the -2 reply."
    ]
  ],
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "TTL in seconds.",
        "type": "integer",
        "minimum": 0
      },
      {
        "description": "The key exists but has no associated expire.",
        "const": -1
      },
      {
        "description": "The key does not exist.",
        "const": -2
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "SETEX",
  "summary": "Sets the string value and expiration time of a key. Creates the key if it doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "2.0.0",
  "arity": 4,
  "function": "setexCommand",
  "deprecated_since": "2.6.12",
  "replaced_by": "`SET` with the `EX` argument",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "seconds",
      "type": "integer"
    },
    {
      "name": "value",
      "type": "string"
    }
  ]
}
{
  "name": "NUMSUB",
  "summary": "Returns a count of subscribers to channels.",
  "complexity": "O(N) for the NUMSUB subcommand, where N is the number of requested channels",
  "group": "pubsub",
  "since": "2.8.0",
  "arity": -2,
  "container": "PUBSUB",
  "function": "pubsubCommand",
  "command_flags": [
    "PUBSUB",
    "LOADING",
    "STALE"
  ],
  "arguments": [
    {
      "name": "channel",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "the number of subscribers per channel, each even element (including 0th) is channel name, each odd element is the number of subscribers",
    "type": "array"
  }
}
{
  "name": "UNBLOCK",
  "summary": "Unblocks a client blocked by a blocking command from a different connection.",
  "complexity": "O(log N) where N is the number of client connections",
  "group": "connection",
  "since": "5.0.0",
  "arity": -3,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "const": 0,
        "description": "if the client was unblocked successfully"
      },
      {
        "const": 1,
        "description": "if the client wasn't unblocked"
      }
    ]
  },
  "arguments": [
    {
      "name": "client-id",
      "type": "integer"
    },
    {
      "name": "unblock-type",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "timeout",
          "type": "pure-token",
          "token": "TIMEOUT"
        },
        {
          "name": "error",
          "type": "pure-token",
          "token": "ERROR"
        }
      ]
    }
  ]
}
{
  "name": "MONITOR",
  "summary": "Listens for all requests received by the server in real-time.",
  "group": "server",
  "since": "1.0.0",
  "arity": 1,
  "function": "monitorCommand",
  "history": [],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ]
}
{
  "name": "BGREWRITEAOF",
  "summary": "Asynchronously rewrites the append-only file to disk.",
  "complexity": "O(1)",
  "group": "server",
  "since": "1.0.0",
  "arity": 1,
  "function": "bgrewriteaofCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "NOSCRIPT"
  ],
  "reply_schema": {
    "description": "A simple string reply indicating that the rewriting started or is about to start ASAP",
    "type": "string"
  }
}
{
  "name": "MOVE",
  "summary": "Moves a key to another database.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "1.0.0",
  "arity": 3,
  "function": "moveCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "db",
      "type": "integer"
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "key was moved",
        "const": 1
      },
      {
        "description": "key wasn't moved",
        "const": 0
      }
    ]
  }
}
{
  "name": "FREQ",
  "summary": "Returns the logarithmic access frequency counter of a Redis object.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "4.0.0",
  "arity": 3,
  "container": "OBJECT",
  "function": "objectCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ],
  "reply_schema": {
    "description": "the counter's value",
    "type": "integer"
  }
}
{
  "name": "GRAPH",
  "summary": "Returns a latency graph for an event.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.13",
  "arity": 3,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "arguments": [
    {
      "name": "event",
      "type": "string"
    }
  ],
  "reply_schema": {
    "type": "string",
    "description": "Latency graph"
  }
}
{
  "name": "SCRIPT",
  "summary": "A container for Lua scripts management commands.",
  "complexity": "Depends on subcommand.",
  "group": "scripting",
  "since": "2.6.0",
  "arity": -2
}
{
  "name": "REPLCONF",
  "summary": "An internal command for configuring the replication stream.",
  "complexity": "O(1)",
  "group": "server",
  "since": "3.0.0",
  "arity": -1,
  "function": "replconfCommand",
  "doc_flags": [
    "SYSCMD"
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "ALLOW_BUSY"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "HISTORY",
  "summary": "Returns timestamp-latency samples for an event.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.13",
  "arity": 3,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "An array where each element is a two elements array representing the timestamp and the latency of the event.",
    "items": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "timestamp of the event",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "latency of the event",
          "type": "integer",
          "minimum": 0
        }
      ]
    }
  },
  "arguments": [
    {
      "name": "event",
      "type": "string"
    }
  ]
}
{
  "name": "ECHO",
  "summary": "Returns the given string.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "1.0.0",
  "arity": 2,
  "function": "echoCommand",
  "command_flags": [
    "LOADING",
    "STALE",
    "FAST"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "description": "The given string",
    "type": "string"
  },
  "arguments": [
    {
      "name": "message",
      "type": "string"
    }
  ]
}
{
  "name": "SINTERSTORE",
  "summary": "Stores the intersect of multiple sets in a key.",
  "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
  "group": "set",
  "since": "1.0.0",
  "arity": -3,
  "function": "sinterstoreCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "Number of the elements in the result set.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    }
  ]
}
{
  "name": "ID",
  "summary": "Returns the unique client ID of the connection.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "5.0.0",
  "arity": 2,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The id of the client"
  }
}
{
  "name": "XACK",
  "summary": "Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.",
  "complexity": "O(1) for each message ID processed.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -4,
  "function": "xackCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "group",
      "type": "string"
    },
    {
      "name": "ID",
      "type": "string",
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "The command returns the number of messages successfully acknowledged. Certain message IDs may no longer be part of the PEL (for example because they have already been acknowledged), and XACK will not count them as successfully acknowledged.",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "PUBSUB",
  "summary": "A container for Pub/Sub commands.",
  "complexity": "Depends on subcommand.",
  "group": "pubsub",
  "since": "2.8.0",
  "arity": -2
}
{
  "name": "XREAD",
  "summary": "Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -4,
  "function": "xreadCommand",
  "get_keys_function": "xreadGetKeys",
  "command_flags": [
    "BLOCKING",
    "READONLY"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "keyword": {
          "keyword": "STREAMS",
          "startfrom": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 2
        }
      }
    }
  ],
  "arguments": [
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    },
    {
      "token": "BLOCK",
      "name": "milliseconds",
      "type": "integer",
      "optional": true
    },
    {
      "name": "streams",
      "token": "STREAMS",
      "type": "block",
      "arguments": [
        {
          "name": "key",
          "type": "key",
          "key_spec_index": 0,
          "multiple": true
        },
        {
          "name": "ID",
          "type": "string",
          "multiple": true
        }
      ]
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "A map of key-value elements when each element composed of key name and the entries reported for that key",
        "type": "object",
        "patternProperties": {
          "^.*$": {
            "description": "The entries reported for that key",
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": [
                {
                  "description": "entry id",
                  "type": "string",
                  "pattern": "[0-9]+-[0-9]+"
                },
                {
                  "description": "array of field-value pairs",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          }
        }
      },
      {
        "description": "If BLOCK option is given, and a timeout occurs, or there is no stream we can serve",
        "type": "null"
      }
    ]
  }
}
{
  "name": "PFCOUNT",
  "summary": "Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).",
  "complexity": "O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.",
  "group": "hyperloglog",
  "since": "2.8.9",
  "arity": -2,
  "function": "pfcountCommand",
  "command_flags": [
    "READONLY",
    "MAY_REPLICATE"
  ],
  "acl_categories": [
    "HYPERLOGLOG"
  ],
  "key_specs": [
    {
      "notes": "RW because it may change the internal representation of the key, and propagate to replicas",
      "flags": [
        "RW",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "The approximated number of unique elements observed via PFADD",
    "type": "integer"
  }
}
{
  "name": "EXEC",
  "summary": "Executes all commands in a transaction.",
  "complexity": "Depends on commands in the transaction",
  "group": "transactions",
  "since": "1.2.0",
  "arity": 1,
  "function": "execCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SKIP_SLOWLOG"
  ],
  "acl_categories": [
    "TRANSACTION"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "Each element being the reply to each of the commands in the atomic transaction.",
        "type": "array"
      },
      {
        "description": "The transaction was aborted because a `WATCH`ed key was touched",
        "type": "null"
      }
    ]
  }
}
{
  "name": "BLMPOP",
  "summary": "Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
  "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
  "group": "list",
  "since": "7.0.0",
  "arity": -5,
  "function": "blmpopCommand",
  "get_keys_function": "blmpopGetKeys",
  "command_flags": [
    "WRITE",
    "BLOCKING"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "Operation timed-out",
        "type": "null"
      },
      {
        "description": "The key from which elements were popped and the popped elements",
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "List key from which elements were popped.",
            "type": "string"
          },
          {
            "description": "Array of popped elements.",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "timeout",
      "type": "double"
    },
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    },
    {
      "name": "where",
      "type": "oneof",
      "arguments": [
        {
          "name": "left",
          "type": "pure-token",
          "token": "LEFT"
        },
        {
          "name": "right",
          "type": "pure-token",
          "token": "RIGHT"
        }
      ]
    },
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "ZREVRANGEBYSCORE",
  "summary": "Returns members in a sorted set within a range of scores in reverse order.",
  "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
  "group": "sorted_set",
  "since": "2.2.0",
  "arity": -4,
  "function": "zrevrangebyscoreCommand",
  "history": [
    [
      "2.1.6",
      "`min` and `max` can be exclusive."
    ]
  ],
  "deprecated_since": "6.2.0",
  "replaced_by": "`ZRANGE` with the `REV` and `BYSCORE` arguments",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "type": "array",
        "description": "List of the elements in the specified score range, as not WITHSCORES",
        "uniqueItems": true,
        "items": {
          "type": "string",
          "description": "Element"
        }
      },
      {
        "type": "array",
        "description": "List of the elements and their scores in the specified score range, as WITHSCORES used",
        "uniqueItems": true,
        "items": {
          "type": "array",
          "description": "Tuple of element and its score",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "element"
            },
            {
              "type": "number",
              "description": "score"
            }
          ]
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "max",
      "type": "double"
    },
    {
      "name": "min",
      "type": "double"
    },
    {
      "name": "withscores",
      "token": "WITHSCORES",
      "type": "pure-token",
      "optional": true
    },
    {
      "token": "LIMIT",
      "name": "limit",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "name": "offset",
          "type": "integer"
        },
        {
          "name": "count",
          "type": "integer"
        }
      ]
    }
  ]
}
{
  "name": "FLUSHDB",
  "summary": "Remove all keys from the current database.",
  "complexity": "O(N) where N is the number of keys in the selected database",
  "group": "server",
  "since": "1.0.0",
  "arity": -1,
  "function": "flushdbCommand",
  "history": [
    [
      "4.0.0",
      "Added the `ASYNC` flushing mode modifier."
    ],
    [
      "6.2.0",
      "Added the `SYNC` flushing mode modifier."
    ]
  ],
  "command_flags": [
    "WRITE"
  ],
  "acl_categories": [
    "KEYSPACE",
    "DANGEROUS"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "flush-type",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "async",
          "type": "pure-token",
          "token": "ASYNC",
          "since": "4.0.0"
        },
        {
          "name": "sync",
          "type": "pure-token",
          "token": "SYNC",
          "since": "6.2.0"
        }
      ]
    }
  ]
}
{
  "name": "REPLICAS",
  "summary": "Returns a list of the monitored Redis replicas.",
  "complexity": "O(N) where N is the number of replicas",
  "group": "sentinel",
  "since": "5.0.0",
  "arity": 3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "List of replicas for this master, and their state.",
    "items": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "arguments": [
    {
      "name": "master-name",
      "type": "string"
    }
  ]
}
{
  "name": "SETNAME",
  "summary": "Sets the connection name.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "2.6.9",
  "arity": 3,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "arguments": [
    {
      "name": "connection-name",
      "type": "string"
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "SHUTDOWN",
  "summary": "Synchronously saves the database(s) to disk and shuts down the Redis server.",
  "complexity": "O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)",
  "group": "server",
  "since": "1.0.0",
  "arity": -1,
  "function": "shutdownCommand",
  "history": [
    [
      "7.0.0",
      "Added the `NOW`, `FORCE` and `ABORT` modifiers."
    ]
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "NO_MULTI",
    "SENTINEL",
    "ALLOW_BUSY"
  ],
  "arguments": [
    {
      "name": "save-selector",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "nosave",
          "type": "pure-token",
          "token": "NOSAVE"
        },
        {
          "name": "save",
          "type": "pure-token",
          "token": "SAVE"
        }
      ]
    },
    {
      "name": "now",
      "type": "pure-token",
      "token": "NOW",
      "optional": true,
      "since": "7.0.0"
    },
    {
      "name": "force",
      "type": "pure-token",
      "token": "FORCE",
      "optional": true,
      "since": "7.0.0"
    },
    {
      "name": "abort",
      "type": "pure-token",
      "token": "ABORT",
      "optional": true,
      "since": "7.0.0"
    }
  ],
  "reply_schema": {
    "description": "OK if ABORT was specified and shutdown was aborted. On successful shutdown, nothing is returned since the server quits and the connection is closed. On failure, an error is returned.",
    "const": "OK"
  }
}
{
  "name": "HMGET",
  "summary": "Returns the values of all fields in a hash.",
  "complexity": "O(N) where N is the number of fields being requested.",
  "group": "hash",
  "since": "2.0.0",
  "arity": -3,
  "function": "hmgetCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "HASH"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "List of values associated with the given fields, in the same order as they are requested.",
    "type": "array",
    "minItems": 1,
    "items": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "field",
      "type": "string",
      "multiple": true
    }
  ]
}
{
  "name": "LINDEX",
  "summary": "Returns an element from a list by its index.",
  "complexity": "O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).",
  "group": "list",
  "since": "1.0.0",
  "arity": 3,
  "function": "lindexCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "null",
        "description": "Index is out of range"
      },
      {
        "description": "The requested element",
        "type": "string"
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "index",
      "type": "integer"
    }
  ]
}
{
  "name": "MEET",
  "summary": "Forces a node to handshake with another node.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": -4,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "history": [
    [
      "4.0.0",
      "Added the optional `cluster_bus_port` argument."
    ]
  ],
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "STALE"
  ],
  "arguments": [
    {
      "name": "ip",
      "type": "string"
    },
    {
      "name": "port",
      "type": "integer"
    },
    {
      "name": "cluster-bus-port",
      "type": "integer",
      "optional": true,
      "since": "4.0.0"
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "READWRITE",
  "summary": "Enables read-write queries for a connection to a Reids Cluster replica node.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 1,
  "function": "readwriteCommand",
  "command_flags": [
    "FAST",
    "LOADING",
    "STALE"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "COPY",
  "summary": "Copies the value of a key to a new key.",
  "complexity": "O(N) worst case for collections, where N is the number of nested items. O(1) for string values.",
  "group": "generic",
  "since": "6.2.0",
  "arity": -3,
  "function": "copyCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "source",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 1
    },
    {
      "token": "DB",
      "name": "destination-db",
      "type": "integer",
      "optional": true
    },
    {
      "name": "replace",
      "token": "REPLACE",
      "type": "pure-token",
      "optional": true
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "source was copied",
        "const": 1
      },
      {
        "description": "source was not copied",
        "const": 0
      }
    ]
  }
}
{
  "name": "LIST",
  "summary": "Lists open connections.",
  "complexity": "O(N) where N is the number of client connections",
  "group": "connection",
  "since": "2.4.0",
  "arity": -2,
  "container": "CLIENT",
  "function": "clientCommand",
  "history": [
    [
      "2.8.12",
      "Added unique client `id` field."
    ],
    [
      "5.0.0",
      "Added optional `TYPE` filter."
    ],
    [
      "6.0.0",
      "Added `user` field."
    ],
    [
      "6.2.0",
      "Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter."
    ],
    [
      "7.0.0",
      "Added `resp`, `multi-mem`, `rbs` and `rbp` fields."
    ],
    [
      "7.0.3",
      "Added `ssub` field."
    ]
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "reply_schema": {
    "type": "string",
    "description": "Information and statistics about client connections"
  },
  "arguments": [
    {
      "token": "TYPE",
      "name": "client-type",
      "type": "oneof",
      "optional": true,
      "since": "5.0.0",
      "arguments": [
        {
          "name": "normal",
          "type": "pure-token",
          "token": "normal"
        },
        {
          "name": "master",
          "type": "pure-token",
          "token": "master"
        },
        {
          "name": "replica",
          "type": "pure-token",
          "token": "replica"
        },
        {
          "name": "pubsub",
          "type": "pure-token",
          "token": "pubsub"
        }
      ]
    },
    {
      "name": "client-id",
      "token": "ID",
      "type": "integer",
      "optional": true,
      "multiple": true,
      "since": "6.2.0"
    }
  ]
}
{
  "name": "ROLE",
  "summary": "Returns the replication role.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.12",
  "arity": 1,
  "function": "roleCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "FAST",
    "SENTINEL"
  ],
  "acl_categories": [
    "ADMIN",
    "DANGEROUS"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "items": [
          {
            "const": "master"
          },
          {
            "description": "current replication master offset",
            "type": "integer"
          },
          {
            "description": "connected replicas",
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 3,
              "maxItems": 3,
              "items": [
                {
                  "description": "replica ip",
                  "type": "string"
                },
                {
                  "description": "replica port",
                  "type": "string"
                },
                {
                  "description": "last acknowledged replication offset",
                  "type": "string"
                }
              ]
            }
          }
        ]
      },
      {
        "type": "array",
        "minItems": 5,
        "maxItems": 5,
        "items": [
          {
            "const": "slave"
          },
          {
            "description": "ip of master",
            "type": "string"
          },
          {
            "description": "port number of master",
            "type": "integer"
          },
          {
            "description": "state of the replication from the point of view of the master",
            "oneOf": [
              {
                "description": "the instance is in handshake with its master",
                "const": "handshake"
              },
              {
                "description": "the instance in not active",
                "const": "none"
              },
              {
                "description": "the instance needs to connect to its master",
                "const": "connect"
              },
              {
                "description": "the master-replica connection is in progress",
                "const": "connecting"
              },
              {
                "description": "the master and replica are trying to perform the synchronization",
                "const": "sync"
              },
              {
                "description": "the replica is online",
                "const": "connected"
              },
              {
                "description": "instance state is unknown",
                "const": "unknown"
              }
            ]
          },
          {
            "description": "the amount of data received from the replica so far in terms of master replication offset",
            "type": "integer"
          }
        ]
      },
      {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "const": "sentinel"
          },
          {
            "description": "list of master names monitored by this sentinel instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      }
    ]
  }
}
{
  "name": "XLEN",
  "summary": "Return the number of messages in a stream.",
  "complexity": "O(1)",
  "group": "stream",
  "since": "5.0.0",
  "arity": 2,
  "function": "xlenCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ],
  "reply_schema": {
    "description": "The number of entries of the stream at key",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "SAVE",
  "summary": "Saves the effective ACL rules in the configured ACL file.",
  "complexity": "O(N). Where N is the number of configured users.",
  "group": "server",
  "since": "6.0.0",
  "arity": 2,
  "container": "ACL",
  "function": "aclCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "GEODIST",
  "summary": "Returns the distance between two members of a geospatial index.",
  "complexity": "O(1)",
  "group": "geo",
  "since": "3.2.0",
  "arity": -4,
  "function": "geodistCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "member1",
      "type": "string"
    },
    {
      "name": "member2",
      "type": "string"
    },
    {
      "name": "unit",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "m",
          "type": "pure-token",
          "token": "m"
        },
        {
          "name": "km",
          "type": "pure-token",
          "token": "km"
        },
        {
          "name": "ft",
          "type": "pure-token",
          "token": "ft"
        },
        {
          "name": "mi",
          "type": "pure-token",
          "token": "mi"
        }
      ]
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "one or both of elements are missing",
        "type": "null"
      },
      {
        "description": "distance as a double (represented as a string) in the specified units",
        "type": "string",
        "pattern": "^[0-9]*(.[0-9]*)?$"
      }
    ]
  }
}
{
  "name": "EVALSHA_RO",
  "summary": "Executes a read-only server-side Lua script by SHA1 digest.",
  "complexity": "Depends on the script that is executed.",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -3,
  "function": "evalShaRoCommand",
  "get_keys_function": "evalGetKeys",
  "command_flags": [
    "NOSCRIPT",
    "SKIP_MONITOR",
    "NO_MANDATORY_KEYS",
    "STALE",
    "READONLY"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "sha1",
      "type": "string"
    },
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "optional": true,
      "multiple": true
    },
    {
      "name": "arg",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "Return value depends on the script that is executed"
  }
}
{
  "name": "BZPOPMAX",
  "summary": "Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.",
  "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
  "group": "sorted_set",
  "since": "5.0.0",
  "arity": -3,
  "function": "bzpopmaxCommand",
  "history": [
    [
      "6.0.0",
      "`timeout` is interpreted as a double instead of an integer."
    ]
  ],
  "command_flags": [
    "WRITE",
    "FAST",
    "BLOCKING"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -2,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "Timeout reached and no elements were popped.",
        "type": "null"
      },
      {
        "description": "The keyname, popped member, and its score.",
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "items": [
          {
            "description": "Keyname",
            "type": "string"
          },
          {
            "description": "Member",
            "type": "string"
          },
          {
            "description": "Score",
            "type": "number"
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    },
    {
      "name": "timeout",
      "type": "double"
    }
  ]
}
{
  "name": "ZLEXCOUNT",
  "summary": "Returns the number of members in a sorted set within a lexicographical range.",
  "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
  "group": "sorted_set",
  "since": "2.8.9",
  "arity": 4,
  "function": "zlexcountCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "Number of elements in the specified score range.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "min",
      "type": "string"
    },
    {
      "name": "max",
      "type": "string"
    }
  ]
}
{
  "name": "LPOS",
  "summary": "Returns the index of matching elements in a list.",
  "complexity": "O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.",
  "group": "list",
  "since": "6.0.6",
  "arity": -3,
  "function": "lposCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "description": "In case there is no matching element",
        "type": "null"
      },
      {
        "description": "An integer representing the matching element",
        "type": "integer"
      },
      {
        "description": "If the COUNT option is given, an array of integers representing the matching elements (empty if there are no matches)",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "integer"
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "element",
      "type": "string"
    },
    {
      "token": "RANK",
      "name": "rank",
      "type": "integer",
      "optional": true
    },
    {
      "token": "COUNT",
      "name": "num-matches",
      "type": "integer",
      "optional": true
    },
    {
      "token": "MAXLEN",
      "name": "len",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "MASTERS",
  "summary": "Returns a list of monitored Redis masters.",
  "complexity": "O(N) where N is the number of masters",
  "group": "sentinel",
  "since": "2.8.4",
  "arity": 2,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "List of monitored Redis masters, and their state.",
    "items": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  }
}
{
  "name": "ZREVRANK",
  "summary": "Returns the index of a member in a sorted set ordered by descending scores.",
  "complexity": "O(log(N))",
  "group": "sorted_set",
  "since": "2.0.0",
  "arity": -3,
  "function": "zrevrankCommand",
  "history": [
    [
      "7.2.0",
      "Added the optional `WITHSCORE` argument."
    ]
  ],
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "null",
        "description": "Key does not exist or the member does not exist in the sorted set."
      },
      {
        "type": "integer",
        "description": "The rank of the member when 'WITHSCORE' is not used."
      },
      {
        "type": "array",
        "description": "The rank and score of the member when 'WITHSCORE' is used.",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "type": "integer"
          },
          {
            "type": "number"
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "member",
      "type": "string"
    },
    {
      "name": "withscore",
      "token": "WITHSCORE",
      "type": "pure-token",
      "optional": true
    }
  ]
}
{
  "name": "LATEST",
  "summary": "Returns the latest latency samples for all events.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.13",
  "arity": 2,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "An array where each element is a four elements array representing the event's name, timestamp, latest and all-time latency measurements.",
    "items": {
      "type": "array",
      "minItems": 4,
      "maxItems": 4,
      "items": [
        {
          "type": "string",
          "description": "Event name."
        },
        {
          "type": "integer",
          "description": "Timestamp."
        },
        {
          "type": "integer",
          "description": "Latest latency in milliseconds."
        },
        {
          "type": "integer",
          "description": "Max latency in milliseconds."
        }
      ]
    }
  }
}
{
  "name": "DELETE",
  "summary": "Deletes a library and its functions.",
  "complexity": "O(1)",
  "group": "scripting",
  "since": "7.0.0",
  "arity": 3,
  "container": "FUNCTION",
  "function": "functionDeleteCommand",
  "command_flags": [
    "NOSCRIPT",
    "WRITE"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "arguments": [
    {
      "name": "library-name",
      "type": "string"
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "SETBIT",
  "summary": "Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.",
  "complexity": "O(1)",
  "group": "bitmap",
  "since": "2.2.0",
  "arity": 4,
  "function": "setbitCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "BITMAP"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "The original bit value stored at offset.",
    "oneOf": [
      {
        "const": 0
      },
      {
        "const": 1
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "offset",
      "type": "integer"
    },
    {
      "name": "value",
      "type": "integer"
    }
  ]
}
{
  "name": "HISTOGRAM",
  "summary": "Returns the cumulative distribution of latencies of a subset or all commands.",
  "complexity": "O(N) where N is the number of commands with latency information being retrieved.",
  "group": "server",
  "since": "7.0.0",
  "arity": -2,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "reply_schema": {
    "type": "object",
    "description": "A map where each key is a command name, and each value is a map with the total calls, and an inner map of the histogram time buckets.",
    "patternProperties": {
      "^.*$": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "calls": {
            "description": "The total calls for the command.",
            "type": "integer",
            "minimum": 0
          },
          "histogram_usec": {
            "description": "Histogram map, bucket id to latency",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        }
      }
    }
  },
  "arguments": [
    {
      "name": "COMMAND",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "SLOTS",
  "summary": "Returns the mapping of cluster slots to nodes.",
  "complexity": "O(N) where N is the total number of Cluster nodes",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 2,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "deprecated_since": "7.0.0",
  "replaced_by": "`CLUSTER SHARDS`",
  "doc_flags": [
    "DEPRECATED"
  ],
  "history": [
    [
      "4.0.0",
      "Added node IDs."
    ],
    [
      "7.0.0",
      "Added additional networking metadata field."
    ]
  ],
  "command_flags": [
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "reply_schema": {
    "description": "nested list of slot ranges with networking information",
    "type": "array",
    "items": {
      "type": "array",
      "minItems": 3,
      "maxItems": 4294967295,
      "items": [
        {
          "description": "start slot number",
          "type": "integer"
        },
        {
          "description": "end slot number",
          "type": "integer"
        },
        {
          "type": "array",
          "description": "Master node for the slot range",
          "minItems": 4,
          "maxItems": 4,
          "items": [
            {
              "description": "endpoint description",
              "oneOf": [
                {
                  "description": "hostname or ip",
                  "type": "string"
                },
                {
                  "description": "unknown type",
                  "type": "null"
                }
              ]
            },
            {
              "description": "port",
              "type": "integer"
            },
            {
              "description": "node name",
              "type": "string"
            },
            {
              "description": "array of node descriptions",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "hostname": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                }
              }
            }
          ]
        }
      ],
      "additionalItems": {
        "type": "array",
        "description": "Replica node for the slot range",
        "minItems": 4,
        "maxItems": 4,
        "items": [
          {
            "description": "endpoint description",
            "oneOf": [
              {
                "description": "hostname or ip",
                "type": "string"
              },
              {
                "description": "unknown type",
                "type": "null"
              }
            ]
          },
          {
            "description": "port",
            "type": "integer"
          },
          {
            "description": "node name",
            "type": "string"
          },
          {
            "description": "array of node descriptions",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "hostname": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              }
            }
          }
        ]
      }
    }
  }
}
{
  "name": "MYID",
  "summary": "Returns the Redis Sentinel instance ID.",
  "complexity": "O(1)",
  "group": "sentinel",
  "since": "6.2.0",
  "arity": 2,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "description": "Node ID of the sentinel instance.",
    "type": "string"
  }
}
{
  "name": "INFO",
  "summary": "Returns information about the connection.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "6.2.0",
  "arity": 2,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "reply_schema": {
    "description": "a unique string, as described at the CLIENT LIST page, for the current client",
    "type": "string"
  }
}
{
  "name": "ZPOPMIN",
  "summary": "Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
  "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
  "group": "sorted_set",
  "since": "5.0.0",
  "arity": -2,
  "function": "zpopminCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "type": "array",
        "description": "List of popped elements and scores when 'COUNT' isn't specified.",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "type": "string",
            "description": "Popped element."
          },
          {
            "type": "number",
            "description": "Score."
          }
        ]
      },
      {
        "type": "array",
        "description": "List of popped elements and scores when 'COUNT' is specified.",
        "items": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "Popped element."
            },
            {
              "type": "number",
              "description": "Score."
            }
          ]
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "REPLICATE",
  "summary": "Configure a node as replica of a master node.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "STALE"
  ],
  "arguments": [
    {
      "name": "node-id",
      "type": "string"
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "PENDING-SCRIPTS",
  "summary": "Returns information about pending scripts for Redis Sentinel.",
  "group": "sentinel",
  "since": "2.8.4",
  "arity": 2,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "List of pending scripts.",
    "items": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "argv": {
          "type": "array",
          "description": "Script arguments.",
          "items": {
            "type": "string"
          }
        },
        "flags": {
          "type": "string",
          "description": "Script flags."
        },
        "pid": {
          "type": "string",
          "description": "Script pid."
        },
        "run-time": {
          "type": "string",
          "description": "Script run-time."
        },
        "run-delay": {
          "type": "string",
          "description": "Script run-delay."
        },
        "retry-num": {
          "type": "string",
          "description": "Number of times we tried to execute the script."
        }
      }
    }
  }
}
{
  "name": "HMSET",
  "summary": "Sets the values of multiple fields.",
  "complexity": "O(N) where N is the number of fields being set.",
  "group": "hash",
  "since": "2.0.0",
  "arity": -4,
  "function": "hsetCommand",
  "deprecated_since": "4.0.0",
  "replaced_by": "`HSET` with multiple field-value pairs",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "HASH"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "data",
      "type": "block",
      "multiple": true,
      "arguments": [
        {
          "name": "field",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        }
      ]
    }
  ]
}
{
  "name": "DEBUG",
  "summary": "A container for debugging commands.",
  "complexity": "Depends on subcommand.",
  "group": "server",
  "since": "1.0.0",
  "arity": -2,
  "function": "debugCommand",
  "doc_flags": [
    "SYSCMD"
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "PROTECTED"
  ]
}
{
  "name": "GETKEYSANDFLAGS",
  "summary": "Extracts the key names and access flags for an arbitrary command.",
  "complexity": "O(N) where N is the number of arguments to the command",
  "group": "server",
  "since": "7.0.0",
  "arity": -3,
  "container": "COMMAND",
  "function": "commandGetKeysAndFlagsCommand",
  "command_flags": [
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "description": "List of keys from the given Redis command and their usage flags.",
    "type": "array",
    "uniqueItems": true,
    "items": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Key name",
          "type": "string"
        },
        {
          "description": "Set of key flags",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      ]
    }
  },
  "arguments": [
    {
      "name": "command",
      "type": "string"
    },
    {
      "name": "arg",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "GEORADIUS_RO",
  "summary": "Returns members from a geospatial index that are within a distance from a coordinate.",
  "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
  "group": "geo",
  "since": "3.2.10",
  "arity": -6,
  "function": "georadiusroCommand",
  "history": [
    [
      "6.2.0",
      "Added the `ANY` option for `COUNT`."
    ]
  ],
  "deprecated_since": "6.2.0",
  "replaced_by": "`GEOSEARCH` with the `BYRADIUS` argument",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "longitude",
      "type": "double"
    },
    {
      "name": "latitude",
      "type": "double"
    },
    {
      "name": "radius",
      "type": "double"
    },
    {
      "name": "unit",
      "type": "oneof",
      "arguments": [
        {
          "name": "m",
          "type": "pure-token",
          "token": "m"
        },
        {
          "name": "km",
          "type": "pure-token",
          "token": "km"
        },
        {
          "name": "ft",
          "type": "pure-token",
          "token": "ft"
        },
        {
          "name": "mi",
          "type": "pure-token",
          "token": "mi"
        }
      ]
    },
    {
      "name": "withcoord",
      "token": "WITHCOORD",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "withdist",
      "token": "WITHDIST",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "withhash",
      "token": "WITHHASH",
      "type": "pure-token",
      "optional": true
    },
    {
      "name": "count-block",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "token": "COUNT",
          "name": "count",
          "type": "integer"
        },
        {
          "name": "any",
          "token": "ANY",
          "type": "pure-token",
          "optional": true,
          "since": "6.2.0"
        }
      ]
    },
    {
      "name": "order",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "asc",
          "type": "pure-token",
          "token": "ASC"
        },
        {
          "name": "desc",
          "type": "pure-token",
          "token": "DESC"
        }
      ]
    }
  ],
  "reply_schema": {
    "description": "Array of matched members information",
    "anyOf": [
      {
        "description": "If no WITH* option is specified, array of matched members names",
        "type": "array",
        "items": {
          "description": "name",
          "type": "string"
        }
      },
      {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 1,
          "maxItems": 4,
          "items": [
            {
              "description": "Matched member name",
              "type": "string"
            }
          ],
          "additionalItems": {
            "oneOf": [
              {
                "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius",
                "type": "string"
              },
              {
                "description": "If WITHHASH option is specified, the geohash integer",
                "type": "integer"
              },
              {
                "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)",
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "latitude (x)",
                    "type": "number"
                  },
                  {
                    "description": "longitude (y)",
                    "type": "number"
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  }
}
{
  "name": "ZINCRBY",
  "summary": "Increments the score of a member in a sorted set.",
  "complexity": "O(log(N)) where N is the number of elements in the sorted set.",
  "group": "sorted_set",
  "since": "1.2.0",
  "arity": 4,
  "function": "zincrbyCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "The new score of `member`",
    "type": "number"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "increment",
      "type": "integer"
    },
    {
      "name": "member",
      "type": "string"
    }
  ]
}
{
  "name": "ZDIFFSTORE",
  "summary": "Stores the difference of multiple sorted sets in a key.",
  "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
  "group": "sorted_set",
  "since": "6.2.0",
  "arity": -4,
  "function": "zdiffstoreCommand",
  "get_keys_function": "zunionInterDiffStoreGetKeys",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "reply_schema": {
    "description": "Number of elements in the resulting sorted set at `destination`",
    "type": "integer"
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    }
  ]
}
{
  "name": "CONFIG",
  "summary": "A container for server configuration commands.",
  "complexity": "Depends on subcommand.",
  "group": "server",
  "since": "2.0.0",
  "arity": -2
}
{
  "name": "LOG",
  "summary": "Lists recent security events generated due to ACL rules.",
  "complexity": "O(N) with N being the number of entries shown.",
  "group": "server",
  "since": "6.0.0",
  "arity": -2,
  "container": "ACL",
  "function": "aclCommand",
  "history": [
    [
      "7.2.0",
      "Added entry ID, timestamp created, and timestamp last updated."
    ]
  ],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "In case `RESET` was not given, a list of recent ACL security events.",
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "integer"
            },
            "reason": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "object": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "age-seconds": {
              "type": "number"
            },
            "client-info": {
              "type": "string"
            },
            "entry-id": {
              "type": "integer"
            },
            "timestamp-created": {
              "type": "integer"
            },
            "timestamp-last-updated": {
              "type": "integer"
            }
          }
        }
      },
      {
        "const": "OK",
        "description": "In case `RESET` was given, OK indicates ACL log was cleared."
      }
    ]
  },
  "arguments": [
    {
      "name": "operation",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "count",
          "type": "integer"
        },
        {
          "name": "reset",
          "type": "pure-token",
          "token": "RESET"
        }
      ]
    }
  ]
}
{
  "name": "GETRANGE",
  "summary": "Returns a substring of the string stored at a key.",
  "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
  "group": "string",
  "since": "2.4.0",
  "arity": 4,
  "function": "getrangeCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "string",
    "description": "The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "start",
      "type": "integer"
    },
    {
      "name": "end",
      "type": "integer"
    }
  ]
}
{
  "name": "HELP",
  "summary": "Returns helpful text about the different subcommands.",
  "complexity": "O(1)",
  "group": "server",
  "since": "5.0.0",
  "arity": 2,
  "container": "CONFIG",
  "function": "configHelpCommand",
  "command_flags": [
    "LOADING",
    "STALE"
  ],
  "reply_schema": {
    "type": "array",
    "description": "Helpful text about subcommands.",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "DECR",
  "summary": "Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": 2,
  "function": "decrCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The value of the key after decrementing it."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "ACL",
  "summary": "A container for Access List Control commands.",
  "complexity": "Depends on subcommand.",
  "group": "server",
  "since": "6.0.0",
  "arity": -2,
  "command_flags": [
    "SENTINEL"
  ]
}
{
  "name": "STRLEN",
  "summary": "Returns the length of a string value.",
  "complexity": "O(1)",
  "group": "string",
  "since": "2.2.0",
  "arity": 2,
  "function": "strlenCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "The length of the string value stored at key, or 0 when key does not exist.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "XTRIM",
  "summary": "Deletes messages from the beginning of a stream.",
  "complexity": "O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -4,
  "function": "xtrimCommand",
  "history": [
    [
      "6.2.0",
      "Added the `MINID` trimming strategy and the `LIMIT` option."
    ]
  ],
  "command_flags": [
    "WRITE"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "trim",
      "type": "block",
      "arguments": [
        {
          "name": "strategy",
          "type": "oneof",
          "arguments": [
            {
              "name": "maxlen",
              "type": "pure-token",
              "token": "MAXLEN"
            },
            {
              "name": "minid",
              "type": "pure-token",
              "token": "MINID",
              "since": "6.2.0"
            }
          ]
        },
        {
          "name": "operator",
          "type": "oneof",
          "optional": true,
          "arguments": [
            {
              "name": "equal",
              "type": "pure-token",
              "token": "="
            },
            {
              "name": "approximately",
              "type": "pure-token",
              "token": "~"
            }
          ]
        },
        {
          "name": "threshold",
          "type": "string"
        },
        {
          "token": "LIMIT",
          "name": "count",
          "type": "integer",
          "optional": true,
          "since": "6.2.0"
        }
      ]
    }
  ],
  "reply_schema": {
    "description": "The number of entries deleted from the stream.",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "PUNSUBSCRIBE",
  "summary": "Stops listening to messages published to channels that match one or more patterns.",
  "complexity": "O(N) where N is the number of patterns to unsubscribe.",
  "group": "pubsub",
  "since": "2.0.0",
  "arity": -1,
  "function": "punsubscribeCommand",
  "command_flags": [
    "PUBSUB",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "arguments": [
    {
      "name": "pattern",
      "type": "pattern",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "HINCRBYFLOAT",
  "summary": "Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.",
  "complexity": "O(1)",
  "group": "hash",
  "since": "2.6.0",
  "arity": 4,
  "function": "hincrbyfloatCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "HASH"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "string",
    "description": "The value of the field after the increment operation."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "field",
      "type": "string"
    },
    {
      "name": "increment",
      "type": "double"
    }
  ]
}
{
  "name": "GETNAME",
  "summary": "Returns the name of the connection.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "2.6.9",
  "arity": 2,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "string",
        "description": "The connection name of the current connection"
      },
      {
        "type": "null",
        "description": "Connection name was not set"
      }
    ]
  }
}
{
  "name": "ZUNIONSTORE",
  "summary": "Stores the union of multiple sorted sets in a key.",
  "complexity": "O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
  "group": "sorted_set",
  "since": "2.0.0",
  "arity": -4,
  "function": "zunionstoreCommand",
  "get_keys_function": "zunionInterDiffStoreGetKeys",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "keynum": {
          "keynumidx": 0,
          "firstkey": 1,
          "step": 1
        }
      }
    }
  ],
  "reply_schema": {
    "description": "The number of elements in the resulting sorted set.",
    "type": "integer"
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "numkeys",
      "type": "integer"
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    },
    {
      "token": "WEIGHTS",
      "name": "weight",
      "type": "integer",
      "optional": true,
      "multiple": true
    },
    {
      "token": "AGGREGATE",
      "name": "aggregate",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "sum",
          "type": "pure-token",
          "token": "SUM"
        },
        {
          "name": "min",
          "type": "pure-token",
          "token": "MIN"
        },
        {
          "name": "max",
          "type": "pure-token",
          "token": "MAX"
        }
      ]
    }
  ]
}
{
  "name": "PERSIST",
  "summary": "Removes the expiration time of a key.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "2.2.0",
  "arity": 2,
  "function": "persistCommand",
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "const": 0,
        "description": "Key does not exist or does not have an associated timeout."
      },
      {
        "const": 1,
        "description": "The timeout has been removed."
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "INCR",
  "summary": "Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "1.0.0",
  "arity": 2,
  "function": "incrCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM",
    "FAST"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ],
  "reply_schema": {
    "description": "The value of key after the increment",
    "type": "integer"
  }
}
{
  "name": "MEMORY",
  "summary": "A container for memory diagnostics commands.",
  "complexity": "Depends on subcommand.",
  "group": "server",
  "since": "4.0.0",
  "arity": -2
}
{
  "name": "REFCOUNT",
  "summary": "Returns the reference count of a value of a key.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "2.2.3",
  "arity": 3,
  "container": "OBJECT",
  "function": "objectCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ],
  "reply_schema": {
    "description": "the number of references",
    "type": "integer"
  }
}
{
  "name": "GEOADD",
  "summary": "Adds one or more members to a geospatial index. The key is created if it doesn't exist.",
  "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
  "group": "geo",
  "since": "3.2.0",
  "arity": -5,
  "function": "geoaddCommand",
  "history": [
    [
      "6.2.0",
      "Added the `CH`, `NX` and `XX` options."
    ]
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "condition",
      "type": "oneof",
      "optional": true,
      "since": "6.2.0",
      "arguments": [
        {
          "name": "nx",
          "type": "pure-token",
          "token": "NX"
        },
        {
          "name": "xx",
          "type": "pure-token",
          "token": "XX"
        }
      ]
    },
    {
      "name": "change",
      "token": "CH",
      "type": "pure-token",
      "optional": true,
      "since": "6.2.0"
    },
    {
      "name": "data",
      "type": "block",
      "multiple": true,
      "arguments": [
        {
          "name": "longitude",
          "type": "double"
        },
        {
          "name": "latitude",
          "type": "double"
        },
        {
          "name": "member",
          "type": "string"
        }
      ]
    }
  ],
  "reply_schema": {
    "description": "When used without optional arguments, the number of elements added to the sorted set (excluding score updates).  If the CH option is specified, the number of elements that were changed (added or updated).",
    "type": "integer"
  }
}
{
  "name": "RPOPLPUSH",
  "summary": "Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.",
  "complexity": "O(1)",
  "group": "list",
  "since": "1.2.0",
  "arity": 3,
  "function": "rpoplpushCommand",
  "deprecated_since": "6.2.0",
  "replaced_by": "`LMOVE` with the `RIGHT` and `LEFT` arguments",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "LIST"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "ACCESS",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RW",
        "INSERT"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "string",
        "description": "The element being popped and pushed."
      },
      {
        "type": "null",
        "description": "Source list is empty."
      }
    ]
  },
  "arguments": [
    {
      "name": "source",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 1
    }
  ]
}
{
  "name": "STATS",
  "summary": "Returns information about a function during execution.",
  "complexity": "O(1)",
  "group": "scripting",
  "since": "7.0.0",
  "arity": 2,
  "container": "FUNCTION",
  "function": "functionStatsCommand",
  "command_flags": [
    "NOSCRIPT",
    "ALLOW_BUSY"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT",
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:SPECIAL"
  ],
  "reply_schema": {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "running_script": {
        "description": "information about the running script.",
        "oneOf": [
          {
            "description": "If there's no in-flight function",
            "type": "null"
          },
          {
            "description": "a map with the information about the running script",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "description": "the name of the function.",
                "type": "string"
              },
              "command": {
                "description": "the command and arguments used for invoking the function.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "duration_ms": {
                "description": "the function's runtime duration in milliseconds.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "engines": {
        "description": "A map when each entry in the map represent a single engine.",
        "type": "object",
        "patternProperties": {
          "^.*$": {
            "description": "Engine map contains statistics about the engine",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "libraries_count": {
                "description": "number of libraries",
                "type": "integer"
              },
              "functions_count": {
                "description": "number of functions",
                "type": "integer"
              }
            }
          }
        }
      }
    }
  }
}
{
  "name": "RESTORE",
  "summary": "Restores all libraries from a payload.",
  "complexity": "O(N) where N is the number of functions on the payload",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -3,
  "container": "FUNCTION",
  "function": "functionRestoreCommand",
  "command_flags": [
    "NOSCRIPT",
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "arguments": [
    {
      "name": "serialized-value",
      "type": "string"
    },
    {
      "name": "policy",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "flush",
          "type": "pure-token",
          "token": "FLUSH"
        },
        {
          "name": "append",
          "type": "pure-token",
          "token": "APPEND"
        },
        {
          "name": "replace",
          "type": "pure-token",
          "token": "REPLACE"
        }
      ]
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "HELP",
  "summary": "Returns helpful text about the different subcommands.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "5.0.0",
  "arity": 2,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "type": "array",
    "description": "Helpful text about subcommands.",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "IDLETIME",
  "summary": "Returns the time since the last access to a Redis object.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "2.2.3",
  "arity": 3,
  "container": "OBJECT",
  "function": "objectCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ],
  "reply_schema": {
    "description": "the idle time in seconds",
    "type": "integer"
  }
}
{
  "name": "CAT",
  "summary": "Lists the ACL categories, or the commands inside a category.",
  "complexity": "O(1) since the categories and commands are a fixed set.",
  "group": "server",
  "since": "6.0.0",
  "arity": -2,
  "container": "ACL",
  "function": "aclCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "reply_schema": {
    "anyOf": [
      {
        "type": "array",
        "description": "In case `category` was not given, a list of existing ACL categories",
        "items": {
          "type": "string"
        }
      },
      {
        "type": "array",
        "description": "In case `category` was given, list of commands that fall under the provided ACL category",
        "items": {
          "type": "string"
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "category",
      "type": "string",
      "optional": true
    }
  ]
}
{
  "name": "LINKS",
  "summary": "Returns a list of all TCP links to and from peer nodes.",
  "complexity": "O(N) where N is the total number of Cluster nodes",
  "group": "cluster",
  "since": "7.0.0",
  "arity": 2,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "STALE"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT"
  ],
  "reply_schema": {
    "description": "an array of cluster links and their attributes",
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "direction": {
          "description": "This link is established by the local node _to_ the peer, or accepted by the local node _from_ the peer.",
          "oneOf": [
            {
              "description": "connection initiated from peer",
              "const": "from"
            },
            {
              "description": "connection initiated to peer",
              "const": "to"
            }
          ]
        },
        "node": {
          "description": "the node id of the peer",
          "type": "string"
        },
        "create-time": {
          "description": "unix time creation time of the link. (In the case of a _to_ link, this is the time when the TCP link is created by the local node, not the time when it is actually established.)",
          "type": "integer"
        },
        "events": {
          "description": "events currently registered for the link. r means readable event, w means writable event",
          "type": "string"
        },
        "send-buffer-allocated": {
          "description": "allocated size of the link's send buffer, which is used to buffer outgoing messages toward the peer",
          "type": "integer"
        },
        "send-buffer-used": {
          "description": "size of the portion of the link's send buffer that is currently holding data(messages)",
          "type": "integer"
        }
      },
      "additionalProperties": false
    }
  }
}
{
  "name": "SCARD",
  "summary": "Returns the number of members in a set.",
  "complexity": "O(1)",
  "group": "set",
  "since": "1.0.0",
  "arity": 2,
  "function": "scardCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "SET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "The cardinality (number of elements) of the set, or 0 if key does not exist.",
    "type": "integer",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "EXPIRETIME",
  "summary": "Returns the expiration time of a key as a Unix timestamp.",
  "complexity": "O(1)",
  "group": "generic",
  "since": "7.0.0",
  "arity": 2,
  "function": "expiretimeCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "acl_categories": [
    "KEYSPACE"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "oneOf": [
      {
        "type": "integer",
        "description": "Expiration Unix timestamp in seconds.",
        "minimum": 0
      },
      {
        "const": -1,
        "description": "The key exists but has no associated expiration time."
      },
      {
        "const": -2,
        "description": "The key does not exist."
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    }
  ]
}
{
  "name": "DEBUG",
  "summary": "Lists or updates the current configurable parameters of Redis Sentinel.",
  "complexity": "O(N) where N is the number of configurable parameters",
  "group": "sentinel",
  "since": "7.0.0",
  "arity": -2,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "oneOf": [
      {
        "description": "The configuration update was successful.",
        "const": "OK"
      },
      {
        "description": "List of configurable time parameters and their values (milliseconds).",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "data",
      "type": "block",
      "optional": true,
      "multiple": true,
      "arguments": [
        {
          "name": "parameter",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        }
      ]
    }
  ]
}
{
  "name": "SAVE",
  "summary": "Synchronously saves the database(s) to disk.",
  "complexity": "O(N) where N is the total number of keys in all databases",
  "group": "server",
  "since": "1.0.0",
  "arity": 1,
  "function": "saveCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "NOSCRIPT",
    "NO_MULTI"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "GEOSEARCHSTORE",
  "summary": "Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.",
  "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
  "group": "geo",
  "since": "6.2.0",
  "arity": -8,
  "function": "geosearchstoreCommand",
  "history": [
    [
      "7.0.0",
      "Added support for uppercase unit names."
    ]
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "GEO"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "source",
      "type": "key",
      "key_spec_index": 1
    },
    {
      "name": "from",
      "type": "oneof",
      "arguments": [
        {
          "token": "FROMMEMBER",
          "name": "member",
          "type": "string"
        },
        {
          "token": "FROMLONLAT",
          "name": "fromlonlat",
          "type": "block",
          "arguments": [
            {
              "name": "longitude",
              "type": "double"
            },
            {
              "name": "latitude",
              "type": "double"
            }
          ]
        }
      ]
    },
    {
      "name": "by",
      "type": "oneof",
      "arguments": [
        {
          "name": "circle",
          "type": "block",
          "arguments": [
            {
              "token": "BYRADIUS",
              "name": "radius",
              "type": "double"
            },
            {
              "name": "unit",
              "type": "oneof",
              "arguments": [
                {
                  "name": "m",
                  "type": "pure-token",
                  "token": "m"
                },
                {
                  "name": "km",
                  "type": "pure-token",
                  "token": "km"
                },
                {
                  "name": "ft",
                  "type": "pure-token",
                  "token": "ft"
                },
                {
                  "name": "mi",
                  "type": "pure-token",
                  "token": "mi"
                }
              ]
            }
          ]
        },
        {
          "name": "box",
          "type": "block",
          "arguments": [
            {
              "token": "BYBOX",
              "name": "width",
              "type": "double"
            },
            {
              "name": "height",
              "type": "double"
            },
            {
              "name": "unit",
              "type": "oneof",
              "arguments": [
                {
                  "name": "m",
                  "type": "pure-token",
                  "token": "m"
                },
                {
                  "name": "km",
                  "type": "pure-token",
                  "token": "km"
                },
                {
                  "name": "ft",
                  "type": "pure-token",
                  "token": "ft"
                },
                {
                  "name": "mi",
                  "type": "pure-token",
                  "token": "mi"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "order",
      "type": "oneof",
      "optional": true,
      "arguments": [
        {
          "name": "asc",
          "type": "pure-token",
          "token": "ASC"
        },
        {
          "name": "desc",
          "type": "pure-token",
          "token": "DESC"
        }
      ]
    },
    {
      "name": "count-block",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "token": "COUNT",
          "name": "count",
          "type": "integer"
        },
        {
          "name": "any",
          "token": "ANY",
          "type": "pure-token",
          "optional": true
        }
      ]
    },
    {
      "name": "storedist",
      "token": "STOREDIST",
      "type": "pure-token",
      "optional": true
    }
  ],
  "reply_schema": {
    "description": "the number of elements in the resulting set",
    "type": "integer"
  }
}
{
  "name": "ZRANGE",
  "summary": "Returns members in a sorted set within a range of indexes.",
  "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
  "group": "sorted_set",
  "since": "1.2.0",
  "arity": -4,
  "function": "zrangeCommand",
  "history": [
    [
      "6.2.0",
      "Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options."
    ]
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "description": "A list of member elements",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      {
        "description": "Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "Member",
              "type": "string"
            },
            {
              "description": "Score",
              "type": "number"
            }
          ]
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "start",
      "type": "string"
    },
    {
      "name": "stop",
      "type": "string"
    },
    {
      "name": "sortby",
      "type": "oneof",
      "optional": true,
      "since": "6.2.0",
      "arguments": [
        {
          "name": "byscore",
          "type": "pure-token",
          "token": "BYSCORE"
        },
        {
          "name": "bylex",
          "type": "pure-token",
          "token": "BYLEX"
        }
      ]
    },
    {
      "name": "rev",
      "token": "REV",
      "type": "pure-token",
      "optional": true,
      "since": "6.2.0"
    },
    {
      "token": "LIMIT",
      "name": "limit",
      "type": "block",
      "optional": true,
      "since": "6.2.0",
      "arguments": [
        {
          "name": "offset",
          "type": "integer"
        },
        {
          "name": "count",
          "type": "integer"
        }
      ]
    },
    {
      "name": "withscores",
      "token": "WITHSCORES",
      "type": "pure-token",
      "optional": true
    }
  ]
}
{
  "name": "LOAD",
  "summary": "Creates a library.",
  "complexity": "O(1) (considering compilation time is redundant)",
  "group": "scripting",
  "since": "7.0.0",
  "arity": -3,
  "container": "FUNCTION",
  "function": "functionLoadCommand",
  "command_flags": [
    "NOSCRIPT",
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "arguments": [
    {
      "name": "replace",
      "type": "pure-token",
      "token": "REPLACE",
      "optional": true
    },
    {
      "name": "function-code",
      "type": "string"
    }
  ],
  "reply_schema": {
    "description": "The library name that was loaded",
    "type": "string"
  }
}
{
  "name": "LOLWUT",
  "summary": "Displays computer art and the Redis version",
  "group": "server",
  "since": "5.0.0",
  "arity": -1,
  "function": "lolwutCommand",
  "command_flags": [
    "READONLY",
    "FAST"
  ],
  "reply_schema": {
    "type": "string",
    "description": "String containing the generative computer art, and a text with the Redis version."
  },
  "arguments": [
    {
      "token": "VERSION",
      "name": "version",
      "type": "integer",
      "optional": true
    }
  ]
}
{
  "name": "RESET",
  "summary": "Resets the latency data for one or more events.",
  "complexity": "O(1)",
  "group": "server",
  "since": "2.8.13",
  "arity": -2,
  "container": "LATENCY",
  "function": "latencyCommand",
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_NODES",
    "RESPONSE_POLICY:AGG_SUM"
  ],
  "reply_schema": {
    "type": "integer",
    "description": "Number of event time series that were reset."
  },
  "arguments": [
    {
      "name": "event",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "BITOP",
  "summary": "Performs bitwise operations on multiple strings, and stores the result.",
  "complexity": "O(N)",
  "group": "bitmap",
  "since": "2.6.0",
  "arity": -4,
  "function": "bitopCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "BITMAP"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 3
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "operation",
      "type": "oneof",
      "arguments": [
        {
          "name": "and",
          "type": "pure-token",
          "token": "AND"
        },
        {
          "name": "or",
          "type": "pure-token",
          "token": "OR"
        },
        {
          "name": "xor",
          "type": "pure-token",
          "token": "XOR"
        },
        {
          "name": "not",
          "type": "pure-token",
          "token": "NOT"
        }
      ]
    },
    {
      "name": "destkey",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "the size of the string stored in the destination key, that is equal to the size of the longest input string",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "SINTER",
  "summary": "Returns the intersect of multiple sets.",
  "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
  "group": "set",
  "since": "1.0.0",
  "arity": -2,
  "function": "sinterCommand",
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "SET"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT_ORDER"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "array",
    "description": "List with the members of the resulting set.",
    "uniqueItems": true,
    "items": {
      "type": "string"
    }
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0,
      "multiple": true
    }
  ]
}
{
  "name": "XREVRANGE",
  "summary": "Returns the messages from a stream within a range of IDs in reverse order.",
  "complexity": "O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
  "group": "stream",
  "since": "5.0.0",
  "arity": -4,
  "function": "xrevrangeCommand",
  "history": [
    [
      "6.2.0",
      "Added exclusive ranges."
    ]
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "STREAM"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "end",
      "type": "string"
    },
    {
      "name": "start",
      "type": "string"
    },
    {
      "token": "COUNT",
      "name": "count",
      "type": "integer",
      "optional": true
    }
  ],
  "reply_schema": {
    "description": "An array of the entries with IDs matching the specified range",
    "type": "array",
    "items": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Stream id",
          "type": "string",
          "pattern": "[0-9]+-[0-9]+"
        },
        {
          "description": "Array of field-value pairs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    }
  }
}
{
  "name": "SUNIONSTORE",
  "summary": "Stores the union of multiple sets in a key.",
  "complexity": "O(N) where N is the total number of elements in all given sets.",
  "group": "set",
  "since": "1.0.0",
  "arity": -3,
  "function": "sunionstoreCommand",
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "SET"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    },
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 2
        }
      },
      "find_keys": {
        "range": {
          "lastkey": -1,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "Number of the elements in the resulting set.",
    "minimum": 0
  },
  "arguments": [
    {
      "name": "destination",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 1,
      "multiple": true
    }
  ]
}
{
  "name": "SPUBLISH",
  "summary": "Post a message to a shard channel",
  "complexity": "O(N) where N is the number of clients subscribed to the receiving shard channel.",
  "group": "pubsub",
  "since": "7.0.0",
  "arity": 3,
  "function": "spublishCommand",
  "command_flags": [
    "PUBSUB",
    "LOADING",
    "STALE",
    "FAST",
    "MAY_REPLICATE"
  ],
  "arguments": [
    {
      "name": "shardchannel",
      "type": "string"
    },
    {
      "name": "message",
      "type": "string"
    }
  ],
  "key_specs": [
    {
      "flags": [
        "NOT_KEY"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "description": "the number of clients that received the message. Note that in a Redis Cluster, only clients that are connected to the same node as the publishing client are included in the count",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "DELSLOTS",
  "summary": "Sets hash slots as unbound for a node.",
  "complexity": "O(N) where N is the total number of hash slot arguments",
  "group": "cluster",
  "since": "3.0.0",
  "arity": -3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "NO_ASYNC_LOADING",
    "ADMIN",
    "STALE"
  ],
  "arguments": [
    {
      "name": "slot",
      "type": "integer",
      "multiple": true
    }
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "XGROUP",
  "summary": "A container for consumer groups commands.",
  "complexity": "Depends on subcommand.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -2
}
{
  "name": "ASKING",
  "summary": "Signals that a cluster client is following an -ASK redirect.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 1,
  "function": "askingCommand",
  "command_flags": [
    "FAST"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "XINFO",
  "summary": "A container for stream introspection commands.",
  "complexity": "Depends on subcommand.",
  "group": "stream",
  "since": "5.0.0",
  "arity": -2
}
{
  "name": "ZRANGEBYSCORE",
  "summary": "Returns members in a sorted set within a range of scores.",
  "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
  "group": "sorted_set",
  "since": "1.0.5",
  "arity": -4,
  "function": "zrangebyscoreCommand",
  "history": [
    [
      "2.0.0",
      "Added the `WITHSCORES` modifier."
    ]
  ],
  "deprecated_since": "6.2.0",
  "replaced_by": "`ZRANGE` with the `BYSCORE` argument",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "READONLY"
  ],
  "acl_categories": [
    "SORTEDSET"
  ],
  "key_specs": [
    {
      "flags": [
        "RO",
        "ACCESS"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "anyOf": [
      {
        "type": "array",
        "description": "List of the elements in the specified score range, as not WITHSCORES",
        "uniqueItems": true,
        "items": {
          "type": "string",
          "description": "Element"
        }
      },
      {
        "type": "array",
        "description": "List of the elements and their scores in the specified score range, as WITHSCORES used",
        "uniqueItems": true,
        "items": {
          "type": "array",
          "description": "Tuple of element and its score",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "element",
              "type": "string"
            },
            {
              "description": "score",
              "type": "number"
            }
          ]
        }
      }
    ]
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "min",
      "type": "double"
    },
    {
      "name": "max",
      "type": "double"
    },
    {
      "name": "withscores",
      "token": "WITHSCORES",
      "type": "pure-token",
      "optional": true,
      "since": "2.0.0"
    },
    {
      "token": "LIMIT",
      "name": "limit",
      "type": "block",
      "optional": true,
      "arguments": [
        {
          "name": "offset",
          "type": "integer"
        },
        {
          "name": "count",
          "type": "integer"
        }
      ]
    }
  ]
}
{
  "name": "INFO-CACHE",
  "summary": "Returns the cached `INFO` replies from the deployment's instances.",
  "complexity": "O(N) where N is the number of instances",
  "group": "sentinel",
  "since": "3.2.0",
  "arity": -3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "type": "array",
    "description": "This is actually a map, the odd entries are a master name, and the even entries are the last cached INFO output from that master and all its replicas.",
    "minItems": 0,
    "maxItems": 4294967295,
    "items": [
      {
        "oneOf": [
          {
            "type": "string",
            "description": "The master name."
          },
          {
            "type": "array",
            "description": "This is an array of pairs, the odd entries are the INFO age, and the even entries are the cached INFO string. The first pair belong to the master and the rest are its replicas.",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "The number of milliseconds since when the INFO was cached.",
                "type": "integer"
              },
              {
                "description": "The cached INFO string or null.",
                "oneOf": [
                  {
                    "description": "The cached INFO string.",
                    "type": "string"
                  },
                  {
                    "description": "No cached INFO string.",
                    "type": "null"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "arguments": [
    {
      "name": "nodename",
      "type": "string",
      "multiple": true
    }
  ]
}
{
  "name": "HELP",
  "summary": "Returns helpful text about the different subcommands.",
  "complexity": "O(1)",
  "group": "scripting",
  "since": "7.0.0",
  "arity": 2,
  "container": "FUNCTION",
  "function": "functionHelpCommand",
  "command_flags": [
    "LOADING",
    "STALE"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "reply_schema": {
    "type": "array",
    "description": "Helpful text about subcommands.",
    "items": {
      "type": "string"
    }
  }
}
{
  "name": "SHARDNUMSUB",
  "summary": "Returns the count of subscribers of shard channels.",
  "complexity": "O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels",
  "group": "pubsub",
  "since": "7.0.0",
  "arity": -2,
  "container": "PUBSUB",
  "function": "pubsubCommand",
  "command_flags": [
    "PUBSUB",
    "LOADING",
    "STALE"
  ],
  "arguments": [
    {
      "name": "shardchannel",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ],
  "reply_schema": {
    "description": "the number of subscribers per shard channel, each even element (including 0th) is channel name, each odd element is the number of subscribers",
    "type": "array"
  }
}
{
  "name": "TRACKINGINFO",
  "summary": "Returns information about server-assisted client-side caching for the connection.",
  "complexity": "O(1)",
  "group": "connection",
  "since": "6.2.0",
  "arity": 2,
  "container": "CLIENT",
  "function": "clientCommand",
  "command_flags": [
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "reply_schema": {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "flags": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "const": "off",
              "description": "The connection isn't using server assisted client side caching."
            },
            {
              "const": "on",
              "description": "Server assisted client side caching is enabled for the connection."
            },
            {
              "const": "bcast",
              "description": "The client uses broadcasting mode."
            },
            {
              "const": "optin",
              "description": "The client does not cache keys by default."
            },
            {
              "const": "optout",
              "description": "The client caches keys by default."
            },
            {
              "const": "caching-yes",
              "description": "The next command will cache keys (exists only together with optin)."
            },
            {
              "const": "caching-no",
              "description": "The next command won't cache keys (exists only together with optout)."
            },
            {
              "const": "noloop",
              "description": "The client isn't notified about keys modified by itself."
            },
            {
              "const": "broken_redirect",
              "description": "The client ID used for redirection isn't valid anymore."
            }
          ]
        }
      },
      "redirect": {
        "type": "integer",
        "description": "The client ID used for notifications redirection, or -1 when none."
      },
      "prefixes": {
        "type": "array",
        "description": "List of key prefixes for which notifications are sent to the client.",
        "items": {
          "type": "string"
        }
      }
    }
  }
}
{
  "name": "HDEL",
  "summary": "Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.",
  "complexity": "O(N) where N is the number of fields to be removed.",
  "group": "hash",
  "since": "2.0.0",
  "arity": -3,
  "function": "hdelCommand",
  "history": [
    [
      "2.4.0",
      "Accepts multiple `field` arguments."
    ]
  ],
  "command_flags": [
    "WRITE",
    "FAST"
  ],
  "acl_categories": [
    "HASH"
  ],
  "key_specs": [
    {
      "flags": [
        "RW",
        "DELETE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "type": "integer",
    "description": "The number of fields that were removed from the hash."
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "field",
      "type": "string",
      "multiple": true
    }
  ]
}
{
  "name": "PURGE",
  "summary": "Asks the allocator to release memory.",
  "complexity": "Depends on how much memory is allocated, could be slow",
  "group": "server",
  "since": "4.0.0",
  "arity": 2,
  "container": "MEMORY",
  "function": "memoryCommand",
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ALL_SUCCEEDED"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "COUNTKEYSINSLOT",
  "summary": "Returns the number of keys in a hash slot.",
  "complexity": "O(1)",
  "group": "cluster",
  "since": "3.0.0",
  "arity": 3,
  "container": "CLUSTER",
  "function": "clusterCommand",
  "command_flags": [
    "STALE"
  ],
  "arguments": [
    {
      "name": "slot",
      "type": "integer"
    }
  ],
  "reply_schema": {
    "description": "The number of keys in the specified hash slot",
    "type": "integer",
    "minimum": 0
  }
}
{
  "name": "KILL",
  "summary": "Terminates a server-side Lua script during execution.",
  "complexity": "O(1)",
  "group": "scripting",
  "since": "2.6.0",
  "arity": 2,
  "container": "SCRIPT",
  "function": "scriptCommand",
  "command_flags": [
    "NOSCRIPT",
    "ALLOW_BUSY"
  ],
  "acl_categories": [
    "SCRIPTING"
  ],
  "command_tips": [
    "REQUEST_POLICY:ALL_SHARDS",
    "RESPONSE_POLICY:ONE_SUCCEEDED"
  ],
  "reply_schema": {
    "const": "OK"
  }
}
{
  "name": "DOCS",
  "summary": "Returns documentary information about one, multiple or all commands.",
  "complexity": "O(N) where N is the number of commands to look up",
  "group": "server",
  "since": "7.0.0",
  "arity": -2,
  "container": "COMMAND",
  "function": "commandDocsCommand",
  "command_flags": [
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "acl_categories": [
    "CONNECTION"
  ],
  "command_tips": [
    "NONDETERMINISTIC_OUTPUT_ORDER"
  ],
  "reply_schema": {
    "description": "A map where each key is a command name, and each value is the documentary information",
    "type": "object",
    "additionalProperties": false,
    "patternProperties": {
      "^.*$": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "summary": {
            "description": "short command description",
            "type": "string"
          },
          "since": {
            "description": "the Redis version that added the command (or for module commands, the module version).",
            "type": "string"
          },
          "group": {
            "description": "the functional group to which the command belongs",
            "oneOf": [
              {
                "const": "bitmap"
              },
              {
                "const": "cluster"
              },
              {
                "const": "connection"
              },
              {
                "const": "generic"
              },
              {
                "const": "geo"
              },
              {
                "const": "hash"
              },
              {
                "const": "hyperloglog"
              },
              {
                "const": "list"
              },
              {
                "const": "module"
              },
              {
                "const": "pubsub"
              },
              {
                "const": "scripting"
              },
              {
                "const": "sentinel"
              },
              {
                "const": "server"
              },
              {
                "const": "set"
              },
              {
                "const": "sorted-set"
              },
              {
                "const": "stream"
              },
              {
                "const": "string"
              },
              {
                "const": "transactions"
              }
            ]
          },
          "complexity": {
            "description": "a short explanation about the command's time complexity.",
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "doc_flags": {
            "description": "an array of documentation flags",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "description": "the command is deprecated.",
                  "const": "deprecated"
                },
                {
                  "description": "a system command that isn't meant to be called by users.",
                  "const": "syscmd"
                }
              ]
            }
          },
          "deprecated_since": {
            "description": "the Redis version that deprecated the command (or for module commands, the module version)",
            "type": "string"
          },
          "replaced_by": {
            "description": "the alternative for a deprecated command.",
            "type": "string"
          },
          "history": {
            "description": "an array of historical notes describing changes to the command's behavior or arguments.",
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": [
                {
                  "type": "string",
                  "description": "The Redis version that the entry applies to."
                },
                {
                  "type": "string",
                  "description": "The description of the change."
                }
              ]
            }
          },
          "arguments": {
            "description": "an array of maps that describe the command's arguments.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "display_text": {
                  "type": "string"
                },
                "key_spec_index": {
                  "type": "integer"
                },
                "token": {
                  "type": "string"
                },
                "summary": {
                  "type": "string"
                },
                "since": {
                  "type": "string"
                },
                "deprecated_since": {
                  "type": "string"
                },
                "flags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "arguments": {
                  "type": "array"
                }
              }
            }
          },
          "reply_schema": {
            "description": "command reply schema",
            "type": "object"
          },
          "subcommands": {
            "description": "A map where each key is a subcommand, and each value is the documentary information",
            "$ref": "#"
          }
        }
      }
    }
  },
  "arguments": [
    {
      "name": "command-name",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "DRYRUN",
  "summary": "Simulates the execution of a command by a user, without executing the command.",
  "complexity": "O(1).",
  "group": "server",
  "since": "7.0.0",
  "arity": -4,
  "container": "ACL",
  "function": "aclCommand",
  "history": [],
  "command_flags": [
    "ADMIN",
    "NOSCRIPT",
    "LOADING",
    "STALE",
    "SENTINEL"
  ],
  "reply_schema": {
    "anyOf": [
      {
        "const": "OK",
        "description": "The given user may successfully execute the given command."
      },
      {
        "type": "string",
        "description": "The description of the problem, in case the user is not allowed to run the given command."
      }
    ]
  },
  "arguments": [
    {
      "name": "username",
      "type": "string"
    },
    {
      "name": "command",
      "type": "string"
    },
    {
      "name": "arg",
      "type": "string",
      "optional": true,
      "multiple": true
    }
  ]
}
{
  "name": "REMOVE",
  "summary": "Stops monitoring.",
  "complexity": "O(1)",
  "group": "sentinel",
  "since": "2.8.4",
  "arity": 3,
  "container": "SENTINEL",
  "function": "sentinelCommand",
  "command_flags": [
    "ADMIN",
    "SENTINEL",
    "ONLY_SENTINEL"
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "master-name",
      "type": "string"
    }
  ]
}
{
  "name": "PSETEX",
  "summary": "Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.",
  "complexity": "O(1)",
  "group": "string",
  "since": "2.6.0",
  "arity": 4,
  "function": "psetexCommand",
  "deprecated_since": "2.6.12",
  "replaced_by": "`SET` with the `PX` argument",
  "doc_flags": [
    "DEPRECATED"
  ],
  "command_flags": [
    "WRITE",
    "DENYOOM"
  ],
  "acl_categories": [
    "STRING"
  ],
  "key_specs": [
    {
      "flags": [
        "OW",
        "UPDATE"
      ],
      "begin_search": {
        "index": {
          "pos": 1
        }
      },
      "find_keys": {
        "range": {
          "lastkey": 0,
          "step": 1,
          "limit": 0
        }
      }
    }
  ],
  "reply_schema": {
    "const": "OK"
  },
  "arguments": [
    {
      "name": "key",
      "type": "key",
      "key_spec_index": 0
    },
    {
      "name": "milliseconds",
      "type": "integer"
    },
    {
      "name": "value",
      "type": "string"
    }
  ]
}
